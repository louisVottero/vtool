# Copyright (C) 2025 Louis Vottero louis.vot@gmail.com    All rights reserved.

from . import graph
import unreal

from vtool import util

in_unreal = util.in_unreal


def n(unreal_node):
    """
    returns the node path
    """
    if not in_unreal:
        return
    if unreal_node is None:
        return
    return unreal_node.get_node_path()


class VetalaLib(object):

    def __init__(self):
        pass

    def ConstrainTransform(self, controller, library):

        entry = 'Entry'
        return1 = 'Return'

        controller.add_exposed_pin('SourceTransform', unreal.RigVMPinDirection.INPUT, 'FRigElementKey', '/Script/ControlRig.RigElementKey', '(Type=Bone,Name="None")')
        controller.add_exposed_pin('TargetTransform', unreal.RigVMPinDirection.INPUT, 'FRigElementKey', '/Script/ControlRig.RigElementKey', '(Type=Bone,Name="None")')

        set_transform = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_SetTransform', 'Execute', unreal.Vector2D(208.0, -16.0), 'Set Transform')
        multiply = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathTransformMul', 'Execute', unreal.Vector2D(-80.0, 800.0), 'Multiply')
        get_transform = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_GetTransform', 'Execute', unreal.Vector2D(-928.0, 592.0), 'Get Transform')
        get_parent = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_HierarchyGetParent', 'Execute', unreal.Vector2D(-1248.0, 944.0), 'Get Parent')
        get_transform1 = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_GetTransform', 'Execute', unreal.Vector2D(-912.0, 928.0), 'Get Transform')
        inverse = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathTransformInverse', 'Execute', unreal.Vector2D(-480.0, 1008.0), 'Inverse')
        multiply1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathTransformMul', 'Execute', unreal.Vector2D(-880.0, 400.0), 'Multiply')
        get_transform2 = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_GetTransform', 'Execute', unreal.Vector2D(-1744.0, 336.0), 'Get Transform')
        get_transform3 = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_GetTransform', 'Execute', unreal.Vector2D(-1744.0, 560.0), 'Get Transform')
        inverse1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathTransformInverse', 'Execute', unreal.Vector2D(-1248.0, 592.0), 'Inverse')
        multiply2 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathTransformMul', 'Execute', unreal.Vector2D(-496.0, 448.0), 'Multiply')

        graph.add_link(entry, 'ExecuteContext', set_transform, 'ExecutePin', controller)
        graph.add_link(set_transform, 'ExecutePin', return1, 'ExecuteContext', controller)
        graph.add_link(entry, 'SourceTransform', get_transform, 'Item', controller)
        graph.add_link(entry, 'SourceTransform', get_transform3, 'Item', controller)
        graph.add_link(entry, 'TargetTransform', set_transform, 'Item', controller)
        graph.add_link(entry, 'TargetTransform', get_parent, 'Child', controller)
        graph.add_link(entry, 'TargetTransform', get_transform2, 'Item', controller)
        graph.add_link(multiply, 'Result', set_transform, 'Value', controller)
        graph.add_link(multiply2, 'Result', multiply, 'A', controller)
        graph.add_link(inverse, 'Result', multiply, 'B', controller)
        graph.add_link(get_transform, 'Transform', multiply2, 'B', controller)
        graph.add_link(get_parent, 'Parent', get_transform1, 'Item', controller)
        graph.add_link(get_transform1, 'Transform', inverse, 'Value', controller)
        graph.add_link(get_transform2, 'Transform', multiply1, 'A', controller)
        graph.add_link(inverse1, 'Result', multiply1, 'B', controller)
        graph.add_link(multiply1, 'Result', multiply2, 'A', controller)
        graph.add_link(get_transform3, 'Transform', inverse1, 'Value', controller)

        graph.set_pin(set_transform, 'Space', 'GlobalSpace', controller)
        graph.set_pin(set_transform, 'bInitial', 'False', controller)
        graph.set_pin(set_transform, 'Weight', '1.000000', controller)
        graph.set_pin(set_transform, 'bPropagateToChildren', 'true', controller)
        graph.set_pin(get_transform, 'Space', 'GlobalSpace', controller)
        graph.set_pin(get_transform, 'bInitial', 'False', controller)
        graph.set_pin(get_parent, 'bDefaultParent', 'false', controller)
        graph.set_pin(get_transform1, 'Space', 'GlobalSpace', controller)
        graph.set_pin(get_transform1, 'bInitial', 'False', controller)
        graph.set_pin(get_transform2, 'Space', 'GlobalSpace', controller)
        graph.set_pin(get_transform2, 'bInitial', 'true', controller)
        graph.set_pin(get_transform3, 'Space', 'GlobalSpace', controller)
        graph.set_pin(get_transform3, 'bInitial', 'true', controller)

    def ConstructName(self, controller, library):

        controller.remove_exposed_pin('ExecuteContext')

        entry = 'Entry'
        controller.add_exposed_pin('Description', unreal.RigVMPinDirection.INPUT, 'FString', 'None', '')
        controller.add_exposed_pin('Side', unreal.RigVMPinDirection.INPUT, 'FString', 'None', '')
        controller.add_exposed_pin('RestrainNumbering', unreal.RigVMPinDirection.INPUT, 'bool', 'None', 'False')
        controller.add_exposed_pin('Number', unreal.RigVMPinDirection.INPUT, 'int32', 'None', '0')
        return1 = 'Return'
        controller.add_exposed_pin('Result', unreal.RigVMPinDirection.OUTPUT, 'FName', 'None', 'None')
        join = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_StringJoin', 'Execute', unreal.Vector2D(-832.0, -352.0), 'Join')
        join1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_StringJoin', 'Execute', unreal.Vector2D(-576.0, -352.0), 'Join')
        add = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathIntAdd', 'Execute', unreal.Vector2D(-976.0, -16.0), 'Add')
        to_string = controller.add_template_node('DISPATCH_RigDispatch_ToString(in Value,out Result)', unreal.Vector2D(-768.0, -16.0), 'To String')
        if1 = controller.add_template_node('DISPATCH_RigVMDispatch_If(in Condition,in True,in False,out Result)', unreal.Vector2D(-272.0, -352.0), 'If')
        join2 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_StringJoin', 'Execute', unreal.Vector2D(16.0, -352.0), 'Join')
        to_uppercase = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_StringToUppercase', 'Execute', unreal.Vector2D(880.0, -96.0), 'To Uppercase')
        from_string = controller.add_template_node('DISPATCH_RigDispatch_FromString(in String,out Result)', unreal.Vector2D(1080.0, -96.0), 'From String')
        replace = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_NameReplace', 'Execute', unreal.Vector2D(1318.0, -108.0), 'Replace')
        chop = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_NameTruncate', 'Execute', unreal.Vector2D(1590.0, -92.0), 'Chop')
        ends_with = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_EndsWith', 'Execute', unreal.Vector2D(1606.0, -268.0), 'Ends With')
        if2 = controller.add_template_node('DISPATCH_RigVMDispatch_If(in Condition,in True,in False,out Result)', unreal.Vector2D(1910.0, -92.0), 'If')
        f_string = controller.add_free_reroute_node('FString', 'FString', is_constant=False, custom_widget_name='', default_value='', position=[-160.0, -128.0], node_name='', setup_undo_redo=True)
        and1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathBoolAnd', 'Execute', unreal.Vector2D(-656.0, -576.0), 'And')
        equals = controller.add_template_node('DISPATCH_RigVMDispatch_CoreEquals(in A,in B,out Result)', unreal.Vector2D(-1008.0, -576.0), 'Equals')
        f_string1 = controller.add_free_reroute_node('FString', 'FString', is_constant=False, custom_widget_name='', default_value='', position=[-384.0, -176.0], node_name='', setup_undo_redo=True)
        f_string2 = controller.add_free_reroute_node('FString', 'FString', is_constant=False, custom_widget_name='', default_value='', position=[-544.0, -176.0], node_name='', setup_undo_redo=True)
        f_name = controller.add_free_reroute_node('FName', 'FString', is_constant=False, custom_widget_name='', default_value='', position=[1670.0, 164.0], node_name='', setup_undo_redo=True)
        replace1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_NameReplace', 'Execute', unreal.Vector2D(2182.0, -60.0), 'Replace')
        or1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathBoolOr', 'Execute', unreal.Vector2D(-368.0, -624.0), 'Or')
        if3 = controller.add_template_node('DISPATCH_RigVMDispatch_If(in Condition,in True,in False,out Result)', unreal.Vector2D(608.0, -80.0), 'If')
        concat = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_StringConcat', 'Execute', unreal.Vector2D(384.0, 272.0), 'Concat')
        replace2 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_StringReplace', 'Execute', unreal.Vector2D(128.0, 112.0), 'Replace')
        concat1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_StringConcat', 'Execute', unreal.Vector2D(-288.0, 0.0), 'Concat')
        concat2 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_StringConcat', 'Execute', unreal.Vector2D(-480.0, 64.0), 'Concat')
        length = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_StringLength', 'Execute', unreal.Vector2D(-784.0, 240.0), 'Length')
        greater = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathIntGreater', 'Execute', unreal.Vector2D(-528.787295, 347.20549), 'Greater')
        contains = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_StringContains', 'Execute', unreal.Vector2D(-48.0, -96.0), 'Contains')
        and2 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathBoolAnd', 'Execute', unreal.Vector2D(272.0, -32.0), 'And')

        controller.set_array_pin_size(f'{n(join)}.Values', 2)
        controller.set_array_pin_size(f'{n(join1)}.Values', 2)
        controller.set_array_pin_size(f'{n(join2)}.Values', 2)

        graph.add_link(entry, 'Side', f_string, 'Value', controller)
        graph.add_link(entry, 'Side', concat2, 'B', controller)
        graph.add_link(entry, 'Side', length, 'Value', controller)
        graph.add_link(entry, 'Side', replace2, 'Old', controller)
        graph.add_link(entry, 'RestrainNumbering', and1, 'B', controller)
        graph.add_link(entry, 'RestrainNumbering', or1, 'A', controller)
        graph.add_link(entry, 'Number', add, 'A', controller)
        graph.add_link(entry, 'Number', equals, 'A', controller)
        graph.add_link(replace1, 'Result', return1, 'Result', controller)
        graph.add_link(join, 'Result', f_string2, 'Value', controller)
        graph.add_link(join1, 'Result', if1, 'False', controller)
        graph.add_link(add, 'Result', to_string, 'Value', controller)
        graph.add_link(or1, 'Result', if1, 'Condition', controller)
        graph.add_link(f_string1, 'Value', if1, 'True', controller)
        graph.add_link(join2, 'Result', if3, 'False', controller)
        graph.add_link(join2, 'Result', replace2, 'Name', controller)
        graph.add_link(join2, 'Result', contains, 'Name', controller)
        graph.add_link(if3, 'Result', to_uppercase, 'Value', controller)
        graph.add_link(to_uppercase, 'Result', from_string, 'String', controller)
        graph.add_link(from_string, 'Result', replace, 'Name', controller)
        graph.add_link(replace, 'Result', chop, 'Name', controller)
        graph.add_link(replace, 'Result', ends_with, 'Name', controller)
        graph.add_link(replace, 'Result', f_name, 'Value', controller)
        graph.add_link(chop, 'Remainder', if2, 'True', controller)
        graph.add_link(ends_with, 'Result', if2, 'Condition', controller)
        graph.add_link(f_name, 'Value', if2, 'False', controller)
        graph.add_link(if2, 'Result', replace1, 'Name', controller)
        graph.add_link(equals, 'Result', and1, 'A', controller)
        graph.add_link(and1, 'Result', or1, 'B', controller)
        graph.add_link(f_string2, 'Value', f_string1, 'Value', controller)
        graph.add_link(and2, 'Result', if3, 'Condition', controller)
        graph.add_link(concat, 'Result', if3, 'True', controller)
        graph.add_link(replace2, 'Result', concat, 'A', controller)
        graph.add_link(concat2, 'Result', concat, 'B', controller)
        graph.add_link(concat2, 'Result', concat1, 'A', controller)
        graph.add_link(concat1, 'Result', contains, 'Search', controller)
        graph.add_link(length, 'Length', greater, 'A', controller)
        graph.add_link(greater, 'Result', and2, 'A', controller)
        graph.add_link(contains, 'Result', and2, 'B', controller)
        graph.add_link(entry, 'Description', join, 'Values.1', controller)
        graph.add_link(join, 'Result', join1, 'Values.0', controller)
        graph.add_link(to_string, 'Result', join1, 'Values.1', controller)
        graph.add_link(if1, 'Result', join2, 'Values.0', controller)
        graph.add_link(f_string, 'Value', join2, 'Values.1', controller)

        graph.set_pin(join, 'Values', '("CNT","")', controller)
        graph.set_pin(join, 'Separator', '_', controller)
        graph.set_pin(join1, 'Values', '("","0")', controller)
        graph.set_pin(join1, 'Separator', '_', controller)
        graph.set_pin(add, 'B', '1', controller)
        graph.set_pin(join2, 'Values', '("","")', controller)
        graph.set_pin(join2, 'Separator', '_', controller)
        graph.set_pin(replace, 'Old', '__', controller)
        graph.set_pin(replace, 'New', '_', controller)
        graph.set_pin(chop, 'Count', '1', controller)
        graph.set_pin(chop, 'FromEnd', 'True', controller)
        graph.set_pin(ends_with, 'Ending', '_', controller)
        graph.set_pin(equals, 'B', '0', controller)
        graph.set_pin(replace1, 'Old', '__', controller)
        graph.set_pin(replace1, 'New', '_', controller)
        graph.set_pin(concat1, 'B', '_', controller)
        graph.set_pin(concat2, 'A', '_', controller)
        graph.set_pin(greater, 'B', '0', controller)

    def ControlSub(self, controller, library):

        controller.add_local_variable_from_object_path('sub_items',
                                                       'TArray<FRigElementKey>',
                                                       '/Script/ControlRig.RigElementKey',
                                                       '')
        controller.add_local_variable_from_object_path('last_item',
                                                       'FRigElementKey',
                                                       '/Script/ControlRig.RigElementKey', '')
        controller.add_local_variable_from_object_path('percent', 'double', '', '')
        controller.add_local_variable_from_object_path('increment', 'int32', '', '')

        entry = 'Entry'
        return1 = 'Return'

        controller.add_exposed_pin('control', unreal.RigVMPinDirection.INPUT, 'FRigElementKey', '/Script/ControlRig.RigElementKey', '(Type=None,Name="None")')
        controller.add_exposed_pin('sub_count', unreal.RigVMPinDirection.INPUT, 'int32', 'None', '')
        controller.add_exposed_pin('color', unreal.RigVMPinDirection.INPUT, 'FLinearColor', '/Script/CoreUObject.LinearColor', '(R=0.000000,G=0.000000,B=0.000000,A=0.000000)')

        controller.add_exposed_pin('SubControls', unreal.RigVMPinDirection.OUTPUT, 'TArray<FRigElementKey>', '/Script/ControlRig.RigElementKey', '()')
        controller.add_exposed_pin('LastSubControl', unreal.RigVMPinDirection.OUTPUT, 'FRigElementKey', '/Script/ControlRig.RigElementKey', '(Type=None,Name="None")')
        spawn_transform_control = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_HierarchyAddControlTransform', 'Execute', unreal.Vector2D(592.0, -32.0), 'Spawn Transform Control')
        to_string = controller.add_template_node('DISPATCH_RigDispatch_ToString(in Value,out Result)', unreal.Vector2D(-1936.0, 880.0), 'To String')
        add = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathIntAdd', 'Execute', unreal.Vector2D(-2128.0, 896.0), 'Add')
        join = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_StringJoin', 'Execute', unreal.Vector2D(-1744.0, 880.0), 'Join')
        replace = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_NameReplace', 'Execute', unreal.Vector2D(-688.0, 832.0), 'Replace')
        join1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_StringJoin', 'Execute', unreal.Vector2D(-1520.0, 880.0), 'Join')
        from_string = controller.add_template_node('DISPATCH_RigDispatch_FromString(in String,out Result)', unreal.Vector2D(-1296.0, 880.0), 'From String')
        if1 = controller.add_template_node('DISPATCH_RigVMDispatch_If(in Condition,in True,in False,out Result)', unreal.Vector2D(-992.0, 880.0), 'If')
        get_shape_settings = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_HierarchyGetShapeSettings', 'Execute', unreal.Vector2D(-144.0, 352.0), 'Get Shape Settings')
        interpolate = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorLerp', 'Execute', unreal.Vector2D(336.0, 688.0), 'Interpolate')
        for_loop = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_ForLoopCount', 'Execute', unreal.Vector2D(-528.0, -576.0), 'For Loop')
        divide = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathDoubleDiv', 'Execute', unreal.Vector2D(-112.0, -512.0), 'Divide')
        multiply = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathDoubleMul', 'Execute', unreal.Vector2D(192.0, -384.0), 'Multiply')
        to_float = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathIntToFloat', 'Execute', unreal.Vector2D(64.0, -304.0), 'To Float')
        add1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathIntAdd', 'Execute', unreal.Vector2D(-112.0, -384.0), 'Add')
        add2 = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayAdd(io Array,in Element,out Index)', unreal.Vector2D(1536.0, -32.0), 'Add')
        get_sub_items = controller.add_variable_node_from_object_path('sub_items', 'TArray<FRigElementKey>', '/Script/ControlRig.RigElementKey', True, '()', unreal.Vector2D(1344.0, 144.0), 'Get sub_items')
        get_sub_items1 = controller.add_variable_node_from_object_path('sub_items', 'TArray<FRigElementKey>', '/Script/ControlRig.RigElementKey', True, '()', unreal.Vector2D(965.0, -357.0), 'Get sub_items')
        to_float1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathIntToFloat', 'Execute', unreal.Vector2D(-272.0, -368.0), 'To Float')
        set_last_item = controller.add_variable_node_from_object_path('last_item', 'FRigElementKey', '/Script/ControlRig.RigElementKey', False, '', unreal.Vector2D(1088.0, -32.0), 'Set last_item')
        get_last_item = controller.add_variable_node_from_object_path('last_item', 'FRigElementKey', '/Script/ControlRig.RigElementKey', True, '', unreal.Vector2D(208.0, -32.0), 'Get last_item')
        set_percent = controller.add_variable_node('percent', 'double', None, False, '', unreal.Vector2D(384.0, -592.0), 'Set percent')
        get_percent = controller.add_variable_node('percent', 'double', None, True, '', unreal.Vector2D(-128.0, 992.0), 'Get percent')
        set_increment = controller.add_variable_node('increment', 'int32', None, False, '', unreal.Vector2D(160.0, -592.0), 'Set increment')
        get_increment = controller.add_variable_node('increment', 'int32', None, True, '', unreal.Vector2D(-2400.0, 640.0), 'Get increment')
        multiply1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorMul', 'Execute', unreal.Vector2D(144.0, 688.0), 'Multiply')
        get_color = controller.add_variable_node_from_object_path('color', 'FLinearColor', '/Script/CoreUObject.LinearColor', True, '', unreal.Vector2D(-128.0, 1120.0), 'Get color')
        multiply2 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathColorMul', 'Execute', unreal.Vector2D(144.0, 1152.0), 'Multiply')
        interpolate1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathColorLerp', 'Execute', unreal.Vector2D(352.0, 1152.0), 'Interpolate')
        add3 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathIntAdd', 'Execute', unreal.Vector2D(-416.0, -336.0), 'Add')
        get_control = controller.add_variable_node_from_object_path('control', 'FRigElementKey', '/Script/ControlRig.RigElementKey', True, '', unreal.Vector2D(-992.0, 688.0), 'Get control')
        get_last_item1 = controller.add_variable_node_from_object_path('last_item', 'FRigElementKey', '/Script/ControlRig.RigElementKey', True, '', unreal.Vector2D(912.0, -240.0), 'Get last_item')
        set_last_item1 = controller.add_variable_node_from_object_path('last_item', 'FRigElementKey', '/Script/ControlRig.RigElementKey', False, '', unreal.Vector2D(-816.0, -384.0), 'Set last_item')
        greater_equal = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathIntGreaterEqual', 'Execute', unreal.Vector2D(-1760.0, 672.0), 'Greater Equal')

        controller.set_array_pin_size(f'{n(join)}.Values', 3)
        controller.set_array_pin_size(f'{n(join1)}.Values', 2)

        graph.add_link(entry, 'ExecuteContext', set_last_item1, 'ExecuteContext', controller)
        graph.add_link(for_loop, 'Completed', return1, 'ExecuteContext', controller)
        graph.add_link(set_percent, 'ExecuteContext', spawn_transform_control, 'ExecutePin', controller)
        graph.add_link(spawn_transform_control, 'ExecutePin', set_last_item, 'ExecuteContext', controller)
        graph.add_link(set_last_item1, 'ExecuteContext', for_loop, 'ExecutePin', controller)
        graph.add_link(for_loop, 'ExecutePin', set_increment, 'ExecuteContext', controller)
        graph.add_link(set_last_item, 'ExecuteContext', add2, 'ExecuteContext', controller)
        graph.add_link(set_increment, 'ExecuteContext', set_percent, 'ExecuteContext', controller)
        graph.add_link(entry, 'control', get_shape_settings, 'Item', controller)
        graph.add_link(entry, 'control', set_last_item1, 'Value', controller)
        graph.add_link(entry, 'sub_count', for_loop, 'Count', controller)
        graph.add_link(entry, 'sub_count', add3, 'A', controller)
        graph.add_link(get_sub_items1, 'Value', return1, 'SubControls', controller)
        graph.add_link(get_last_item1, 'Value', return1, 'LastSubControl', controller)
        graph.add_link(get_last_item, 'Value', spawn_transform_control, 'Parent', controller)
        graph.add_link(replace, 'Result', spawn_transform_control, 'Name', controller)
        graph.add_link(spawn_transform_control, 'Item', add2, 'Element', controller)
        graph.add_link(spawn_transform_control, 'Item', set_last_item, 'Value', controller)
        graph.add_link(add, 'Result', to_string, 'Value', controller)
        graph.add_link(get_increment, 'Value', add, 'A', controller)
        graph.add_link(get_control, 'Value.Name', replace, 'Name', controller)
        graph.add_link(if1, 'Result', replace, 'New', controller)
        graph.add_link(join1, 'Result', from_string, 'String', controller)
        graph.add_link(from_string, 'Result', if1, 'True', controller)
        graph.add_link(greater_equal, 'Result', if1, 'Condition', controller)
        graph.add_link(get_shape_settings, 'Settings.Transform.Scale3D', interpolate, 'A', controller)
        graph.add_link(get_shape_settings, 'Settings.Transform.Scale3D', multiply1, 'A', controller)
        graph.add_link(multiply1, 'Result', interpolate, 'B', controller)
        graph.add_link(get_percent, 'Value', interpolate, 'T', controller)
        graph.add_link(for_loop, 'Index', add1, 'A', controller)
        graph.add_link(for_loop, 'Index', set_increment, 'Value', controller)
        graph.add_link(to_float1, 'Result', divide, 'B', controller)
        graph.add_link(divide, 'Result', multiply, 'A', controller)
        graph.add_link(to_float, 'Result', multiply, 'B', controller)
        graph.add_link(multiply, 'Result', set_percent, 'Value', controller)
        graph.add_link(add1, 'Result', to_float, 'Value', controller)
        graph.add_link(get_sub_items, 'Value', add2, 'Array', controller)
        graph.add_link(add3, 'Result', to_float1, 'Value', controller)
        graph.add_link(get_percent, 'Value', interpolate1, 'T', controller)
        graph.add_link(get_increment, 'Value', greater_equal, 'A', controller)
        graph.add_link(get_color, 'Value', multiply2, 'A', controller)
        graph.add_link(get_color, 'Value', interpolate1, 'A', controller)
        graph.add_link(multiply2, 'Result', interpolate1, 'B', controller)
        graph.add_link(to_string, 'Result', join, 'Values.1', controller)
        graph.add_link(join, 'Result', join1, 'Values.1', controller)
        graph.add_link(get_shape_settings, 'Settings.Name', spawn_transform_control, 'Settings.Shape.Name', controller)
        graph.add_link(interpolate1, 'Result', spawn_transform_control, 'Settings.Shape.Color', controller)
        graph.add_link(get_shape_settings, 'Settings.Transform.Rotation', spawn_transform_control, 'Settings.Shape.Transform.Rotation', controller)
        graph.add_link(get_shape_settings, 'Settings.Transform.Translation', spawn_transform_control, 'Settings.Shape.Transform.Translation', controller)
        graph.add_link(interpolate, 'Result', spawn_transform_control, 'Settings.Shape.Transform.Scale3D', controller)

        graph.set_pin(spawn_transform_control, 'OffsetTransform', '(Rotation=(X=0.000000,Y=0.000000,Z=0.000000,W=1.000000),Translation=(X=0.000000,Y=0.000000,Z=0.000000),Scale3D=(X=1.000000,Y=1.000000,Z=1.000000))', controller)
        graph.set_pin(spawn_transform_control, 'OffsetSpace', 'LocalSpace', controller)
        graph.set_pin(spawn_transform_control, 'InitialValue', '(Rotation=(X=0.000000,Y=0.000000,Z=0.000000,W=1.000000),Translation=(X=0.000000,Y=0.000000,Z=0.000000),Scale3D=(X=1.000000,Y=1.000000,Z=1.000000))', controller)
        graph.set_pin(spawn_transform_control, 'Settings', '(InitialSpace=LocalSpace,Shape=(bVisible=True,Name="Default",Color=(R=1.000000,G=0.000000,B=0.000000,A=1.000000),Transform=(Rotation=(X=0.000000,Y=0.000000,Z=0.000000,W=1.000000),Translation=(X=0.000000,Y=0.000000,Z=0.000000),Scale3D=(X=1.000000,Y=1.000000,Z=1.000000))),Proxy=(bIsProxy=False,ShapeVisibility=BasedOnSelection),FilteredChannels=(),DisplayName="None",bUsePreferredRotationOrder=False,PreferredRotationOrder=YZX,Limits=(LimitTranslationX=(bMinimum=False,bMaximum=False),LimitTranslationY=(bMinimum=False,bMaximum=False),LimitTranslationZ=(bMinimum=False,bMaximum=False),LimitPitch=(bMinimum=False,bMaximum=False),LimitYaw=(bMinimum=False,bMaximum=False),LimitRoll=(bMinimum=False,bMaximum=False),LimitScaleX=(bMinimum=False,bMaximum=False),LimitScaleY=(bMinimum=False,bMaximum=False),LimitScaleZ=(bMinimum=False,bMaximum=False),MinValue=(Location=(X=-100.000000,Y=-100.000000,Z=-100.000000),Rotation=(Pitch=-180.000000,Yaw=-180.000000,Roll=-180.000000),Scale=(X=0.000000,Y=0.000000,Z=0.000000)),MaxValue=(Location=(X=100.000000,Y=100.000000,Z=100.000000),Rotation=(Pitch=180.000000,Yaw=180.000000,Roll=180.000000),Scale=(X=10.000000,Y=10.000000,Z=10.000000)),bDrawLimits=True))', controller)
        graph.set_pin(add, 'B', '1', controller)
        graph.set_pin(join, 'Values', '("_","","_")', controller)
        graph.set_pin(replace, 'Old', 'CNT_', controller)
        graph.set_pin(join1, 'Values', '("CNT_SUB","")', controller)
        graph.set_pin(if1, 'False', 'CNT_SUB_', controller)
        graph.set_pin(divide, 'A', '1.000000', controller)
        graph.set_pin(add1, 'B', '1', controller)
        graph.set_pin(multiply1, 'B', '(X=0.500000,Y=0.500000,Z=0.500000)', controller)
        graph.set_pin(multiply2, 'B', '(R=0.500000,G=0.500000,B=0.500000,A=1.000000)', controller)
        graph.set_pin(add3, 'B', '1', controller)
        graph.set_pin(greater_equal, 'B', '0', controller)

    def GetParent(self, controller, library):

        entry = 'Entry'
        return1 = 'Return'
        controller.remove_exposed_pin('ExecuteContext')

        controller.add_exposed_pin('joint', unreal.RigVMPinDirection.INPUT, 'FRigElementKey', '/Script/ControlRig.RigElementKey', '(Type=Bone,Name="None")')
        controller.add_exposed_pin('default_parent', unreal.RigVMPinDirection.INPUT, 'TArray<FRigElementKey>', '/Script/ControlRig.RigElementKey', '()')
        controller.add_exposed_pin('is_top_joint', unreal.RigVMPinDirection.INPUT, 'bool', 'None', '')
        controller.add_exposed_pin('in_hierarchy', unreal.RigVMPinDirection.INPUT, 'bool', 'None', 'False')
        controller.add_exposed_pin('control_layer', unreal.RigVMPinDirection.INPUT, 'FName', 'None', '')

        controller.add_exposed_pin('Result', unreal.RigVMPinDirection.OUTPUT, 'FRigElementKey', '/Script/ControlRig.RigElementKey', '(Type=None,Name="None")')
        get_parent = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_HierarchyGetParent', 'Execute', unreal.Vector2D(-304.0, 192.0), 'Get Parent')
        get_item_metadata = controller.add_template_node('DISPATCH_RigDispatch_GetMetadata(in Item,in Name,in NameSpace,in Default,out Value,out Found)', unreal.Vector2D(-128.0, 192.0), 'Get Item Metadata')
        if1 = controller.add_template_node('DISPATCH_RigVMDispatch_If(in Condition,in True,in False,out Result)', unreal.Vector2D(928.0, -208.0), 'If')
        at = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayGetAtIndex(in Array,in Index,out Element)', unreal.Vector2D(112.0, -64.0), 'At')
        num = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayGetNum(in Array,out Num)', unreal.Vector2D(-640.0, -64.0), 'Num')
        greater = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathIntGreater', 'Execute', unreal.Vector2D(-416.0, -64.0), 'Greater')
        if2 = controller.add_template_node('DISPATCH_RigVMDispatch_If(in Condition,in True,in False,out Result)', unreal.Vector2D(-160.0, -160.0), 'If')
        if3 = controller.add_template_node('DISPATCH_RigVMDispatch_If(in Condition,in True,in False,out Result)', unreal.Vector2D(768.0, 0.0), 'If')
        item_exists = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_ItemExists', 'Execute', unreal.Vector2D(256.0, 320.0), 'Item Exists')
        if4 = controller.add_template_node('DISPATCH_RigVMDispatch_If(in Condition,in True,in False,out Result)', unreal.Vector2D(592.0, 240.0), 'If')

        # controller.set_array_pin_size(f'{n(if2)}.False', 1)

        graph.add_link(entry, 'joint', get_parent, 'Child', controller)
        graph.add_link(entry, 'default_parent', num, 'Array', controller)
        graph.add_link(entry, 'default_parent', if2, 'True', controller)
        graph.add_link(entry, 'is_top_joint', if1, 'Condition', controller)
        graph.add_link(entry, 'in_hierarchy', if3, 'Condition', controller)
        graph.add_link(entry, 'control_layer', get_item_metadata, 'Name', controller)
        graph.add_link(if1, 'Result', return1, 'Result', controller)
        graph.add_link(get_parent, 'Parent', get_item_metadata, 'Item', controller)
        graph.add_link(get_item_metadata, 'Value', item_exists, 'Item', controller)
        graph.add_link(get_item_metadata, 'Value', if4, 'True', controller)
        graph.add_link(at, 'Element', if1, 'True', controller)
        graph.add_link(if3, 'Result', if1, 'False', controller)
        graph.add_link(if2, 'Result', at, 'Array', controller)
        graph.add_link(at, 'Element', if3, 'False', controller)
        graph.add_link(at, 'Element', if4, 'False', controller)
        graph.add_link(num, 'Num', greater, 'A', controller)
        graph.add_link(greater, 'Result', if2, 'Condition', controller)
        graph.add_link(if4, 'Result', if3, 'True', controller)
        graph.add_link(item_exists, 'Exists', if4, 'Condition', controller)

        graph.set_pin(get_parent, 'bDefaultParent', 'True', controller)
        graph.set_pin(get_item_metadata, 'NameSpace', 'Self', controller)
        graph.set_pin(get_item_metadata, 'Default', '(Type=Bone,Name="None")', controller)
        graph.set_pin(at, 'Index', '-1', controller)
        graph.set_pin(greater, 'B', '0', controller)
        graph.set_pin(if2, 'False', '((Type=Bone,Name="None"))', controller)

    def findPoleVector(self, controller, library):

        entry = 'Entry'
        controller.add_exposed_pin('BoneA', unreal.RigVMPinDirection.INPUT, 'FRigElementKey', '/Script/ControlRig.RigElementKey', '()')
        controller.add_exposed_pin('BoneB', unreal.RigVMPinDirection.INPUT, 'FRigElementKey', '/Script/ControlRig.RigElementKey', '()')
        controller.add_exposed_pin('BoneC', unreal.RigVMPinDirection.INPUT, 'FRigElementKey', '/Script/ControlRig.RigElementKey', '()')
        controller.add_exposed_pin('output', unreal.RigVMPinDirection.INPUT, 'double', 'None', '0')
        return1 = 'Return'
        controller.add_exposed_pin('Transform', unreal.RigVMPinDirection.OUTPUT, 'FTransform', '/Script/CoreUObject.Transform', '()')
        get_transform = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_GetTransform', 'Execute', unreal.Vector2D(448.0, 304.0), 'Get Transform')
        get_transform1 = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_GetTransform', 'Execute', unreal.Vector2D(448.0, 559.0), 'Get Transform')
        get_transform2 = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_GetTransform', 'Execute', unreal.Vector2D(448.0, 815.0), 'Get Transform')
        length = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorLength', 'Execute', unreal.Vector2D(1216.0, 799.0), 'Length')
        subtract = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorSub', 'Execute', unreal.Vector2D(960.0, 879.0), 'Subtract')
        subtract1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorSub', 'Execute', unreal.Vector2D(960.0, 511.0), 'Subtract')
        dot = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorDot', 'Execute', unreal.Vector2D(1216.0, 687.0), 'Dot')
        divide = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathFloatDiv', 'Execute', unreal.Vector2D(1376.0, 735.0), 'Divide')
        unit = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorUnit', 'Execute', unreal.Vector2D(1488.0, 927.0), 'Unit')
        scale = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorScale', 'Execute', unreal.Vector2D(1679.0, 927.0), 'Scale')
        subtract2 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorSub', 'Execute', unreal.Vector2D(1760.0, 704.0), 'Subtract')
        scale1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorScale', 'Execute', unreal.Vector2D(2112.0, 752.0), 'Scale')
        add = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorAdd', 'Execute', unreal.Vector2D(2640.0, 192.0), 'Add')
        unit1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorUnit', 'Execute', unreal.Vector2D(1964.0, 724.0), 'Unit')

        graph.add_link(entry, 'ExecuteContext', return1, 'ExecuteContext', controller)
        graph.add_link(entry, 'BoneA', get_transform, 'Item', controller)
        graph.add_link(entry, 'BoneB', get_transform1, 'Item', controller)
        graph.add_link(entry, 'BoneC', get_transform2, 'Item', controller)
        graph.add_link(entry, 'output', scale1, 'Factor', controller)
        graph.add_link(get_transform, 'Transform.Translation', subtract, 'B', controller)
        graph.add_link(get_transform, 'Transform.Translation', subtract1, 'B', controller)
        graph.add_link(get_transform1, 'Transform.Translation', subtract1, 'A', controller)
        graph.add_link(get_transform1, 'Transform.Translation', add, 'A', controller)
        graph.add_link(get_transform2, 'Transform.Translation', subtract, 'A', controller)
        graph.add_link(subtract, 'Result', length, 'Value', controller)
        graph.add_link(length, 'Result', divide, 'B', controller)
        graph.add_link(subtract, 'Result', unit, 'Value', controller)
        graph.add_link(subtract, 'Result', dot, 'B', controller)
        graph.add_link(subtract1, 'Result', dot, 'A', controller)
        graph.add_link(subtract1, 'Result', subtract2, 'A', controller)
        graph.add_link(dot, 'Result', divide, 'A', controller)
        graph.add_link(divide, 'Result', scale, 'Factor', controller)
        graph.add_link(unit, 'Result', scale, 'Value', controller)
        graph.add_link(scale, 'Result', subtract2, 'B', controller)
        graph.add_link(subtract2, 'Result', unit1, 'Value', controller)
        graph.add_link(unit1, 'Result', scale1, 'Value', controller)
        graph.add_link(scale1, 'Result', add, 'B', controller)
        graph.add_link(add, 'Result', return1, 'Transform.Translation', controller)

        graph.set_pin(return1, 'Transform', '(Rotation=(X=0.000000,Y=0.000000,Z=0.000000,W=1.000000),Translation=(X=0.000000,Y=0.000000,Z=0.000000),Scale3D=(X=1.000000,Y=1.000000,Z=1.000000))', controller)
        graph.set_pin(get_transform, 'Space', 'GlobalSpace', controller)
        graph.set_pin(get_transform, 'bInitial', 'False', controller)
        graph.set_pin(get_transform1, 'Space', 'GlobalSpace', controller)
        graph.set_pin(get_transform1, 'bInitial', 'False', controller)
        graph.set_pin(get_transform2, 'Space', 'GlobalSpace', controller)
        graph.set_pin(get_transform2, 'bInitial', 'False', controller)

    def GetItem(self, controller, library):

        controller.remove_exposed_pin('ExecuteContext')

        entry = 'Entry'
        controller.add_exposed_pin('Array', unreal.RigVMPinDirection.INPUT, 'TArray<FRigElementKey>', '/Script/ControlRig.RigElementKey', '()')
        controller.add_exposed_pin('index', unreal.RigVMPinDirection.INPUT, 'int32', 'None', '')
        return1 = 'Return'
        controller.add_exposed_pin('Element', unreal.RigVMPinDirection.OUTPUT, 'FRigElementKey', '/Script/ControlRig.RigElementKey', '(Type=None,Name="None")')
        num = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayGetNum(in Array,out Num)', unreal.Vector2D(-77.505127, 77.997742), 'Num')
        greater = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathIntGreater', 'Execute', unreal.Vector2D(152.494873, 57.997742), 'Greater')
        at = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayGetAtIndex(in Array,in Index,out Element)', unreal.Vector2D(-157.505127, 217.997742), 'At')
        if1 = controller.add_template_node('DISPATCH_RigVMDispatch_If(in Condition,in True,in False,out Result)', unreal.Vector2D(336.0, 112.0), 'If')

        graph.add_link(entry, 'Array', num, 'Array', controller)
        graph.add_link(entry, 'Array', at, 'Array', controller)
        graph.add_link(entry, 'index', at, 'Index', controller)
        graph.add_link(if1, 'Result', return1, 'Element', controller)
        graph.add_link(num, 'Num', greater, 'A', controller)
        graph.add_link(greater, 'Result', if1, 'Condition', controller)
        graph.add_link(at, 'Element', if1, 'True', controller)

        graph.set_pin(greater, 'B', '0', controller)

    def IndexToItems(self, controller, library):

        controller.add_local_variable_from_object_path('local_items',
                                                       'TArray<FRigElementKey>',
                                                       '/Script/ControlRig.RigElementKey',
                                                       '')

        get_local_items = controller.add_variable_node_from_object_path('local_items', 'TArray<FRigElementKey>', '/Script/ControlRig.RigElementKey', True, '()', unreal.Vector2D(-16.0, -336.0), 'Get local_items')
        entry = 'Entry'
        controller.add_exposed_pin('Index', unreal.RigVMPinDirection.INPUT, 'TArray<int32>', 'None', '()')
        controller.add_exposed_pin('Items', unreal.RigVMPinDirection.INPUT, 'TArray<FRigElementKey>', '/Script/ControlRig.RigElementKey', '()')
        return1 = 'Return'
        controller.add_exposed_pin('Result', unreal.RigVMPinDirection.OUTPUT, 'TArray<FRigElementKey>', '/Script/ControlRig.RigElementKey', '()')
        for_each = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayIterator(in Array,out Element,out Index,out Count,out Ratio)', unreal.Vector2D(272.0, 0.0), 'For Each')
        vetala_lib_get_item = controller.add_function_reference_node(library.find_function('vetalaLib_GetItem'), unreal.Vector2D(-80.0, 304.0), 'vetalaLib_GetItem')
        add = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayAdd(io Array,in Element,out Index)', unreal.Vector2D(832.0, 304.0), 'Add')
        set_local_items = controller.add_variable_node_from_object_path('local_items', 'TArray<FRigElementKey>', '/Script/ControlRig.RigElementKey', False, '()', unreal.Vector2D(1120.0, 304.0), 'Set local_items')
        branch = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_ControlFlowBranch', 'Execute', unreal.Vector2D(480.0, 304.0), 'Branch')
        item_exists = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_ItemExists', 'Execute', unreal.Vector2D(176.0, 304.0), 'Item Exists')
        reset = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayReset(io Array)', unreal.Vector2D(160.0, -128.0), 'Reset')

        graph.add_link(entry, 'ExecuteContext', reset, 'ExecuteContext', controller)
        graph.add_link(for_each, 'Completed', return1, 'ExecuteContext', controller)
        graph.add_link(reset, 'ExecuteContext', for_each, 'ExecuteContext', controller)
        graph.add_link(for_each, 'ExecuteContext', branch, 'ExecuteContext', controller)
        graph.add_link(branch, 'True', add, 'ExecuteContext', controller)
        graph.add_link(add, 'ExecuteContext', set_local_items, 'ExecuteContext', controller)
        graph.add_link(get_local_items, 'Value', reset, 'Array', controller)
        graph.add_link(get_local_items, 'Value', add, 'Array', controller)
        graph.add_link(get_local_items, 'Value', return1, 'Result', controller)
        graph.add_link(entry, 'Index', for_each, 'Array', controller)
        graph.add_link(entry, 'Items', vetala_lib_get_item, 'Array', controller)
        graph.add_link(for_each, 'Element', vetala_lib_get_item, 'index', controller)
        graph.add_link(vetala_lib_get_item, 'Element', add, 'Element', controller)
        graph.add_link(vetala_lib_get_item, 'Element', item_exists, 'Item', controller)
        graph.add_link(add, 'Array', set_local_items, 'Value', controller)
        graph.add_link(item_exists, 'Exists', branch, 'Condition', controller)

    def StringToIndex(self, controller, library):

        controller.add_local_variable_from_object_path('local_index',
                                                       'TArray<int32>',
                                                       '',
                                                       '')

        entry = 'Entry'
        controller.add_exposed_pin('string', unreal.RigVMPinDirection.INPUT, 'FString', 'None', '')
        return1 = 'Return'
        controller.add_exposed_pin('index', unreal.RigVMPinDirection.OUTPUT, 'TArray<int32>', 'None', '()')
        split = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_StringSplit', 'Execute', unreal.Vector2D(-272.0, 176.0), 'Split')
        for_each = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayIterator(in Array,out Element,out Index,out Count,out Ratio)', unreal.Vector2D(192.0, 0.0), 'For Each')
        add = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayAdd(io Array,in Element,out Index)', unreal.Vector2D(576.0, 192.0), 'Add')
        from_string = controller.add_template_node('DISPATCH_RigDispatch_FromString(in String,out Result)', unreal.Vector2D(272.0, 320.0), 'From String')
        num = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayGetNum(in Array,out Num)', unreal.Vector2D(-352.0, -128.0), 'Num')
        equals = controller.add_template_node('DISPATCH_RigVMDispatch_CoreEquals(in A,in B,out Result)', unreal.Vector2D(-160.0, -128.0), 'Equals')
        branch = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_ControlFlowBranch', 'Execute', unreal.Vector2D(320.0, -240.0), 'Branch')
        length = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_StringLength', 'Execute', unreal.Vector2D(-608.0, -464.0), 'Length')
        equals1 = controller.add_template_node('DISPATCH_RigVMDispatch_CoreEquals(in A,in B,out Result)', unreal.Vector2D(-352.0, -464.0), 'Equals')
        branch1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_ControlFlowBranch', 'Execute', unreal.Vector2D(64.0, -464.0), 'Branch')
        from_string1 = controller.add_template_node('DISPATCH_RigDispatch_FromString(in String,out Result)', unreal.Vector2D(544.0, -272.0), 'From String')
        add1 = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayAdd(io Array,in Element,out Index)', unreal.Vector2D(720.0, -448.0), 'Add')
        get_local_index = controller.add_variable_node('local_index', 'TArray<int32>', None, True, '()', unreal.Vector2D(400.0, 224.0), 'Get local_index')
        get_local_index1 = controller.add_variable_node('local_index', 'TArray<int32>', None, True, '()', unreal.Vector2D(432.0, -448.0), 'Get local_index')
        set_local_index = controller.add_variable_node('local_index', 'TArray<int32>', None, False, '()', unreal.Vector2D(944.0, -448.0), 'Set local_index')
        set_local_index1 = controller.add_variable_node('local_index', 'TArray<int32>', None, False, '()', unreal.Vector2D(800.0, 192.0), 'Set local_index')
        get_local_index2 = controller.add_variable_node('local_index', 'TArray<int32>', None, True, '()', unreal.Vector2D(896.0, 48.0), 'Get local_index')

        graph.add_link(entry, 'ExecuteContext', branch1, 'ExecuteContext', controller)
        graph.add_link(branch1, 'Completed', return1, 'ExecuteContext', controller)
        graph.add_link(branch, 'False', for_each, 'ExecuteContext', controller)
        graph.add_link(for_each, 'ExecuteContext', add, 'ExecuteContext', controller)
        graph.add_link(add, 'ExecuteContext', set_local_index1, 'ExecuteContext', controller)
        graph.add_link(add, 'Array', set_local_index1, 'Value', controller)
        graph.add_link(get_local_index, 'Value', add, 'Array', controller)
        graph.add_link(branch1, 'False', branch, 'ExecuteContext', controller)
        graph.add_link(branch, 'True', add1, 'ExecuteContext', controller)
        graph.add_link(add1, 'ExecuteContext', set_local_index, 'ExecuteContext', controller)
        graph.add_link(get_local_index1, 'Value', add1, 'Array', controller)
        graph.add_link(add1, 'Array', set_local_index, 'Value', controller)
        graph.add_link(entry, 'string', split, 'Value', controller)
        graph.add_link(entry, 'string', length, 'Value', controller)
        graph.add_link(entry, 'string', from_string1, 'String', controller)
        graph.add_link(get_local_index2, 'Value', return1, 'index', controller)
        graph.add_link(split, 'Result', for_each, 'Array', controller)
        graph.add_link(split, 'Result', num, 'Array', controller)
        graph.add_link(for_each, 'Element', from_string, 'String', controller)

        graph.add_link(from_string, 'Result', add, 'Element', controller)
        graph.add_link(num, 'Num', equals, 'A', controller)
        graph.add_link(equals, 'Result', branch, 'Condition', controller)
        graph.add_link(length, 'Length', equals1, 'A', controller)
        graph.add_link(equals1, 'Result', branch1, 'Condition', controller)
        graph.add_link(from_string1, 'Result', add1, 'Element', controller)

        graph.set_pin(split, 'Separator', ' ', controller)
        graph.set_pin(equals, 'B', '0', controller)
        graph.set_pin(equals1, 'B', '0', controller)

    def OutputRigControls(self, controller, library):

        entry = 'Entry'
        return1 = 'Return'

        num = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayGetNum(in Array,out Num)', unreal.Vector2D(-3.893535250709135, 176.51568603515602), 'Num')
        branch = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_ControlFlowBranch', 'Execute', unreal.Vector2D(352.0, 176.0), 'Branch')
        greater = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathIntGreater', 'Execute', unreal.Vector2D(160.0, 176.0), 'Greater')
        if1 = controller.add_template_node('DISPATCH_RigVMDispatch_If(in Condition,in True,in False,out Result)', unreal.Vector2D(352.0, -64.0), 'If')
        from_string = controller.add_template_node('DISPATCH_RigDispatch_FromString(in String,out Result)', unreal.Vector2D(47.0, -272.0), 'From String')
        find_items_with_tag = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_FindItemsWithMetadataTag', 'Execute', unreal.Vector2D(208.0, -272.0), 'Find Items with Tag')
        controller.add_exposed_pin('uuid', unreal.RigVMPinDirection.INPUT, 'FString', 'None', '')
        controller.add_exposed_pin('controls', unreal.RigVMPinDirection.INPUT, 'TArray<FRigElementKey>', '/Script/ControlRig.RigElementKey', '()')
        controller.add_exposed_pin('out_controls', unreal.RigVMPinDirection.OUTPUT, 'TArray<FRigElementKey>', '/Script/ControlRig.RigElementKey', '()')
        add_tag = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_SetMetadataTag', 'Execute', unreal.Vector2D(1056.0, 144.0), 'Add Tag')
        for_each = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayIterator(in Array,out Element,out Index,out Count,out Ratio)', unreal.Vector2D(706.0, 176.0), 'For Each')
        from_string1 = controller.add_template_node('DISPATCH_RigDispatch_FromString(in String,out Result)', unreal.Vector2D(1024.0, 432.0), 'From String')

        graph.add_link(entry, 'ExecuteContext', branch, 'ExecuteContext', controller)
        graph.add_link(branch, 'True', for_each, 'ExecuteContext', controller)
        graph.add_link(branch, 'Completed', return1, 'ExecuteContext', controller)
        graph.add_link(for_each, 'ExecuteContext', add_tag, 'ExecuteContext', controller)
        graph.add_link(entry, 'controls', num, 'Array', controller)
        graph.add_link(num, 'Num', 'Greater', 'A', controller)
        graph.add_link(greater, 'Result', branch, 'Condition', controller)
        graph.add_link(num, 'Num', greater, 'A', controller)
        graph.add_link(greater, 'Result', if1, 'Condition', controller)
        graph.add_link(entry, 'controls', if1, 'True', controller)
        graph.add_link(find_items_with_tag, 'Items', if1, 'False', controller)
        graph.add_link(if1, 'Result', return1, 'out_controls', controller)
        graph.add_link(entry, 'uuid', from_string, 'String', controller)
        graph.add_link(from_string, 'Result', find_items_with_tag, 'Tag', controller)
        graph.add_link(entry, 'uuid', from_string1, 'String', controller)
        graph.add_link(entry, 'controls', for_each, 'Array', controller)
        graph.add_link(for_each, 'Element', add_tag, 'Item', controller)
        graph.add_link(from_string1, 'Result', add_tag, 'Tag', controller)

        graph.set_pin(greater, 'B', '0', controller)
        graph.set_pin(find_items_with_tag, 'NameSpace', 'Self', controller)
        graph.set_pin(add_tag, 'NameSpace', 'Self', controller)

    def WheelRotate(self, controller, library):

        entry = 'Entry'
        return1 = 'Return'

        controller.add_exposed_pin('control', unreal.RigVMPinDirection.INPUT, 'FRigElementKey', '/Script/ControlRig.RigElementKey', '(Type=None,Name="None")')
        controller.add_exposed_pin('control_spin', unreal.RigVMPinDirection.INPUT, 'FRigElementKey', '/Script/ControlRig.RigElementKey', '(Type=None,Name="None")')
        controller.add_exposed_pin('Diameter', unreal.RigVMPinDirection.INPUT, 'double', 'None', '')
        controller.add_exposed_pin('Enable', unreal.RigVMPinDirection.INPUT, 'double', 'None', '')
        controller.add_exposed_pin('RotateMultiply', unreal.RigVMPinDirection.INPUT, 'double', 'None', '')
        controller.add_exposed_pin('forwardAxis', unreal.RigVMPinDirection.INPUT, 'FVector', '/Script/CoreUObject.Vector', '(X=0.000000,Y=0.000000,Z=0.000000)')
        controller.add_exposed_pin('rotateAxis', unreal.RigVMPinDirection.INPUT, 'FVector', '/Script/CoreUObject.Vector', '(X=0.000000,Y=0.000000,Z=0.000000)')
        controller.add_exposed_pin('steer', unreal.RigVMPinDirection.INPUT, 'double', 'None', '')

        get_transform = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_GetTransform', 'Execute', unreal.Vector2D(-48.0, -16.0), 'Get Transform')
        inverse = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathTransformInverse', 'Execute', unreal.Vector2D(672.0, -16.0), 'Inverse')
        get_transform1 = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_GetTransform', 'Execute', unreal.Vector2D(0.0, 416.0), 'Get Transform')
        delta_from_previous_ = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_DeltaFromPreviousVector', 'Execute', unreal.Vector2D(608.0, 704.0), 'DeltaFromPrevious (Vector)')
        rotate_vector = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathTransformRotateVector', 'Execute', unreal.Vector2D(928.0, 288.0), 'Rotate Vector')
        divide = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathFloatDiv', 'Execute', unreal.Vector2D(1696.0, 880.0), 'Divide')
        from_axis_and_angle = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathQuaternionFromAxisAndAngle', 'Execute', unreal.Vector2D(1936.0, 976.0), 'From Axis And Angle')
        to_world = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_ToWorldSpace_Transform', 'Execute', unreal.Vector2D(448.0, -32.0), 'To World')
        to_world1 = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_ToWorldSpace_Location', 'Execute', unreal.Vector2D(368.0, 608.0), 'To World')
        multiply = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathDoubleMul', 'Execute', unreal.Vector2D(1152.0, 752.0), 'Multiply')
        accumulate_add_ = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_AccumulateFloatAdd', 'Execute', unreal.Vector2D(1424.0, 800.0), 'Accumulate Add (Float)')
        get_control_spin = controller.add_variable_node_from_object_path('control_spin', 'FRigElementKey', '/Script/ControlRig.RigElementKey', True, '', unreal.Vector2D(1408.0, -288.0), 'Get control_spin')
        multiply1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathDoubleMul', 'Execute', unreal.Vector2D(-112.0, 1328.0), 'Multiply')
        multiply2 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathDoubleMul', 'Execute', unreal.Vector2D(208.0, 992.0), 'Multiply')
        multiply3 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorMul', 'Execute', unreal.Vector2D(1104.0, 496.0), 'Multiply')
        multiply4 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorMul', 'Execute', unreal.Vector2D(896.0, 1072.0), 'Multiply')
        dot = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorDot', 'Execute', unreal.Vector2D(1472.0, 128.0), 'Dot')
        set_rotation = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_SetRotation', 'Execute', unreal.Vector2D(1744.0, -384.0), 'Set Rotation')
        cross = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorCross', 'Execute', unreal.Vector2D(-304.0, -592.0), 'Cross')
        from_axis_and_angle1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathQuaternionFromAxisAndAngle', 'Execute', unreal.Vector2D(80.0, -432.0), 'From Axis And Angle')
        radians = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathDoubleRad', 'Execute', unreal.Vector2D(-64.0, -224.0), 'Radians')
        multiply5 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathQuaternionMul', 'Execute', unreal.Vector2D(1584.0, -80.0), 'Multiply')
        multiply6 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathQuaternionMul', 'Execute', unreal.Vector2D(272.0, -224.0), 'Multiply')

        graph.add_link(entry, 'ExecuteContext', set_rotation, 'ExecutePin', controller)
        graph.add_link(set_rotation, 'ExecutePin', return1, 'ExecuteContext', controller)
        graph.add_link(entry, 'control', get_transform, 'Item', controller)
        graph.add_link(entry, 'control_spin', get_transform1, 'Item', controller)
        graph.add_link(entry, 'Diameter', multiply1, 'A', controller)
        graph.add_link(entry, 'Enable', multiply2, 'A', controller)
        graph.add_link(entry, 'RotateMultiply', multiply2, 'B', controller)
        graph.add_link(entry, 'forwardAxis', multiply3, 'B', controller)
        graph.add_link(entry, 'forwardAxis', dot, 'B', controller)
        graph.add_link(entry, 'forwardAxis', cross, 'B', controller)
        graph.add_link(entry, 'rotateAxis', multiply4, 'A', controller)
        graph.add_link(entry, 'rotateAxis', cross, 'A', controller)
        graph.add_link(entry, 'steer', radians, 'Value', controller)
        graph.add_link(get_transform, 'Transform.Rotation', multiply6, 'B', controller)
        graph.add_link(to_world, 'World', inverse, 'Value', controller)
        graph.add_link(inverse, 'Result', rotate_vector, 'Transform', controller)
        graph.add_link(get_transform1, 'Transform.Translation', to_world1, 'Value', controller)
        graph.add_link(to_world1, 'World', delta_from_previous_, 'Value', controller)
        graph.add_link(delta_from_previous_, 'Delta', rotate_vector, 'Vector', controller)
        graph.add_link(rotate_vector, 'Result', multiply3, 'A', controller)
        graph.add_link(accumulate_add_, 'Result', divide, 'A', controller)
        graph.add_link(multiply1, 'Result', divide, 'B', controller)
        graph.add_link(divide, 'Result', from_axis_and_angle, 'Angle', controller)
        graph.add_link(multiply4, 'Result', from_axis_and_angle, 'Axis', controller)
        graph.add_link(from_axis_and_angle, 'Result', multiply5, 'B', controller)
        graph.add_link(multiply2, 'Result', multiply, 'A', controller)
        graph.add_link(dot, 'Result', multiply, 'B', controller)
        graph.add_link(multiply, 'Result', accumulate_add_, 'Increment', controller)
        graph.add_link(get_control_spin, 'Value', set_rotation, 'Item', controller)
        graph.add_link(multiply3, 'Result', dot, 'A', controller)
        graph.add_link(multiply5, 'Result', set_rotation, 'Value', controller)
        graph.add_link(cross, 'Result', from_axis_and_angle1, 'Axis', controller)
        graph.add_link(radians, 'Result', from_axis_and_angle1, 'Angle', controller)
        graph.add_link(from_axis_and_angle1, 'Result', multiply5, 'A', controller)
        graph.add_link(from_axis_and_angle1, 'Result', multiply6, 'A', controller)
        graph.add_link(get_transform, 'Transform.Translation', to_world, 'Value.Translation', controller)
        graph.add_link(multiply6, 'Result', to_world, 'Value.Rotation', controller)

        graph.set_pin(get_transform, 'Space', 'GlobalSpace', controller)
        graph.set_pin(get_transform1, 'Space', 'GlobalSpace', controller)
        graph.set_pin(delta_from_previous_, 'Cache', '(X=0.000000,Y=0.000000,Z=0.000000)', controller)
        graph.set_pin(delta_from_previous_, 'bIsInitialized', 'False', controller)
        graph.set_pin(to_world, 'Value', '(Translation=(X=0.000000,Y=0.000000,Z=0.000000),Scale3D=(X=1.000000,Y=1.000000,Z=1.000000))', controller)
        graph.set_pin(accumulate_add_, 'InitialValue', '0.000000', controller)
        graph.set_pin(accumulate_add_, 'bIntegrateDeltaTime', 'False', controller)
        graph.set_pin(multiply1, 'B', '1.000000', controller)
        graph.set_pin(multiply4, 'B', '(X=1.000000,Y=1.000000,Z=1.000000)', controller)
        graph.set_pin(set_rotation, 'Space', 'LocalSpace', controller)
        graph.set_pin(set_rotation, 'bInitial', 'False', controller)
        graph.set_pin(set_rotation, 'Weight', '1.000000', controller)
        graph.set_pin(set_rotation, 'bPropagateToChildren', 'True', controller)

    def SwitchMode(self, controller, library):

        entry = 'Entry'
        return1 = 'Return'

        controller.add_exposed_pin('mode', unreal.RigVMPinDirection.INPUT, 'int32', 'None', '0')
        controller.add_exposed_pin('layer', unreal.RigVMPinDirection.INPUT, 'int32', 'None', '0')
        controller.add_exposed_pin('switch', unreal.RigVMPinDirection.INPUT, 'int32', 'None', '0')
        controller.add_exposed_pin('joints', unreal.RigVMPinDirection.INPUT, 'TArray<FRigElementKey>', '/Script/ControlRig.RigElementKey', '()')

        controller.add_exposed_pin('Result', unreal.RigVMPinDirection.OUTPUT, 'int32', 'None', '0')
        if1 = controller.add_template_node('DISPATCH_RigVMDispatch_If(in Condition,in True,in False,out Result)', unreal.Vector2D(48.0, -192.0), 'If')
        equals = controller.add_template_node('DISPATCH_RigVMDispatch_CoreEquals(in A,in B,out Result)', unreal.Vector2D(-160.0, -192.0), 'Equals')
        equals1 = controller.add_template_node('DISPATCH_RigVMDispatch_CoreEquals(in A,in B,out Result)', unreal.Vector2D(-192.0, -464.0), 'Equals')
        if2 = controller.add_template_node('DISPATCH_RigVMDispatch_If(in Condition,in True,in False,out Result)', unreal.Vector2D(0.0, -400.0), 'If')
        for_each = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayIterator(in Array,out Element,out Index,out Count,out Ratio)', unreal.Vector2D(-32.0, 64.0), 'For Each')
        set_int32_metadata = controller.add_template_node('DISPATCH_RigDispatch_SetMetadata(in Item,in Name,in NameSpace,in Value,out Success)', unreal.Vector2D(368.0, 80.0), 'Set Int32 Metadata')
        set_int33_metadata = controller.add_template_node('DISPATCH_RigDispatch_SetMetadata(in Item,in Name,in NameSpace,in Value,out Success)', unreal.Vector2D(768.0, 80.0), 'Set Int32 Metadata')

        graph.add_link(entry, 'ExecuteContext', for_each, 'ExecuteContext', controller)
        graph.add_link(for_each, 'Completed', return1, 'ExecuteContext', controller)
        graph.add_link(for_each, 'ExecuteContext', set_int32_metadata, 'ExecuteContext', controller)
        graph.add_link(set_int32_metadata, 'ExecuteContext', set_int33_metadata, 'ExecuteContext', controller)
        graph.add_link(entry, 'mode', equals1, 'A', controller)
        graph.add_link(entry, 'mode', if2, 'False', controller)
        graph.add_link(entry, 'layer', equals, 'A', controller)
        graph.add_link(entry, 'layer', set_int33_metadata, 'Value', controller)
        graph.add_link(entry, 'switch', equals, 'B', controller)
        graph.add_link(entry, 'switch', set_int32_metadata, 'Value', controller)
        graph.add_link(entry, 'joints', for_each, 'Array', controller)
        graph.add_link(if2, 'Result', return1, 'Result', controller)
        graph.add_link(equals, 'Result', if1, 'Condition', controller)
        graph.add_link(if1, 'Result', if2, 'True', controller)
        graph.add_link(equals1, 'Result', if2, 'Condition', controller)
        graph.add_link(for_each, 'Element', set_int32_metadata, 'Item', controller)
        graph.add_link(for_each, 'Element', set_int33_metadata, 'Item', controller)

        graph.set_pin(if1, 'True', '1', controller)
        graph.set_pin(if1, 'False', '3', controller)
        graph.set_pin(equals1, 'B', '1', controller)
        graph.set_pin(set_int32_metadata, 'Name', 'Switch', controller)
        graph.set_pin(set_int32_metadata, 'NameSpace', 'Self', controller)
        graph.set_pin(set_int33_metadata, 'Name', 'Layer', controller)
        graph.set_pin(set_int33_metadata, 'NameSpace', 'Self', controller)

    def rigLayerSolver(self, controller, library):

        entry = 'Entry'
        controller.add_exposed_pin('Joints', unreal.RigVMPinDirection.INPUT, 'TArray<FRigElementKey>', '/Script/ControlRig.RigElementKey', '()')
        return1 = 'Return'
        for_each = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayIterator(in Array,out Element,out Index,out Count,out Ratio)', unreal.Vector2D(16.0, 176.0), 'For Each')
        get_int32_metadata = controller.add_template_node('DISPATCH_RigDispatch_GetMetadata(in Item,in Name,in NameSpace,in Default,out Value,out Found)', unreal.Vector2D(128.0, 1216.0), 'Get Int32 Metadata')
        if1 = controller.add_template_node('DISPATCH_RigVMDispatch_If(in Condition,in True,in False,out Result)', unreal.Vector2D(528.0, 1280.0), 'If')
        get_item_metadata = controller.add_template_node('DISPATCH_RigDispatch_GetMetadata(in Item,in Name,in NameSpace,in Default,out Value,out Found)', unreal.Vector2D(1760.0, 512.0), 'Get Item Metadata')
        concat = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_NameConcat', 'Execute', unreal.Vector2D(1008.0, 1328.0), 'Concat')
        int_to_name = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathIntToName', 'Execute', unreal.Vector2D(752.0, 1360.0), 'Int to Name')
        branch = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_ControlFlowBranch', 'Execute', unreal.Vector2D(1424.0, 816.0), 'Branch')
        not_equals = controller.add_template_node('DISPATCH_RigVMDispatch_CoreNotEquals(in A,in B,out Result)', unreal.Vector2D(1088.0, 912.0), 'Not Equals')
        set_transform = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_SetTransform', 'Execute', unreal.Vector2D(2256.0, 1216.0), 'Set Transform')
        get_transform = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_GetTransform', 'Execute', unreal.Vector2D(1712.0, 1568.0), 'Get Transform')
        for_loop = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_ForLoopCount', 'Execute', unreal.Vector2D(512.0, 176.0), 'For Loop')
        concat1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_NameConcat', 'Execute', unreal.Vector2D(1408.0, 224.0), 'Concat')
        int_to_name1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathIntToName', 'Execute', unreal.Vector2D(1152.0, 224.0), 'Int to Name')
        item_exists = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_ItemExists', 'Execute', unreal.Vector2D(1504.0, 1232.0), 'Item Exists')
        branch1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_ControlFlowBranch', 'Execute', unreal.Vector2D(1808.0, 1280.0), 'Branch')

        graph.add_link(entry, 'ExecuteContext', for_each, 'ExecuteContext', controller)
        graph.add_link(for_each, 'Completed', return1, 'ExecuteContext', controller)
        graph.add_link(for_each, 'ExecuteContext', for_loop, 'ExecutePin', controller)
        graph.add_link(for_loop, 'ExecutePin', branch, 'ExecuteContext', controller)
        graph.add_link(branch, 'True', branch1, 'ExecuteContext', controller)
        graph.add_link(entry, 'Joints', for_each, 'Array', controller)
        graph.add_link(if1, 'Result', int_to_name, 'Number', controller)
        graph.add_link(get_int32_metadata, 'Value', if1, 'True', controller)
        graph.add_link(for_each, 'Element', get_int32_metadata, 'Item', controller)
        graph.add_link(for_each, 'Element', get_item_metadata, 'Item', controller)
        graph.add_link(for_each, 'Element', get_transform, 'Item', controller)

        graph.add_link(get_int32_metadata, 'Found', if1, 'Condition', controller)

        graph.add_link(concat1, 'Result', get_item_metadata, 'Name', controller)
        graph.add_link(get_item_metadata, 'Value', set_transform, 'Item', controller)
        graph.add_link(get_item_metadata, 'Value', item_exists, 'Item', controller)
        graph.add_link(int_to_name, 'Result', concat, 'B', controller)
        graph.add_link(concat, 'Result', not_equals, 'B', controller)
        graph.add_link(not_equals, 'Result', branch, 'Condition', controller)
        graph.add_link(concat1, 'Result', not_equals, 'A', controller)
        graph.add_link(branch1, 'True', set_transform, 'ExecutePin', controller)
        graph.add_link(get_transform, 'Transform', set_transform, 'Value', controller)
        graph.add_link(for_loop, 'Index', int_to_name1, 'Number', controller)
        graph.add_link(int_to_name1, 'Result', concat1, 'B', controller)
        graph.add_link(item_exists, 'Exists', branch1, 'Condition', controller)

        graph.set_pin(get_int32_metadata, 'Name', 'switch', controller)
        graph.set_pin(get_int32_metadata, 'NameSpace', 'Self', controller)
        graph.set_pin(get_int32_metadata, 'Default', '0', controller)
        graph.set_pin(if1, 'False', '0', controller)
        graph.set_pin(get_item_metadata, 'NameSpace', 'Self', controller)
        graph.set_pin(get_item_metadata, 'Default', '(Type=Bone,Name="None")', controller)
        graph.set_pin(concat, 'A', 'Control_', controller)
        graph.set_pin(int_to_name, 'PaddedSize', '0', controller)
        graph.set_pin(set_transform, 'Space', 'GlobalSpace', controller)
        graph.set_pin(set_transform, 'bInitial', 'False', controller)
        graph.set_pin(set_transform, 'Weight', '1.000000', controller)
        graph.set_pin(set_transform, 'bPropagateToChildren', 'True', controller)
        graph.set_pin(get_transform, 'Space', 'GlobalSpace', controller)
        graph.set_pin(get_transform, 'bInitial', 'False', controller)
        graph.set_pin(for_loop, 'Count', '3', controller)
        graph.set_pin(concat1, 'A', 'Control_', controller)
        graph.set_pin(int_to_name1, 'PaddedSize', '0', controller)

    def GetJointDescription(self, controller, library):
        entry = 'Entry'

        controller.add_local_variable_from_object_path('local_name', 'FString', '', '')

        controller.add_exposed_pin('description', unreal.RigVMPinDirection.INPUT, 'FString', 'None', '')
        controller.add_exposed_pin('joint', unreal.RigVMPinDirection.INPUT, 'FRigElementKey', '/Script/ControlRig.RigElementKey', '(Type=None,Name="None")')
        controller.add_exposed_pin('joint_token', unreal.RigVMPinDirection.INPUT, 'FString', 'None', '')
        return1 = 'Return'
        controller.add_exposed_pin('Result', unreal.RigVMPinDirection.OUTPUT, 'FString', 'None', '')
        length = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_StringLength', 'Execute', unreal.Vector2D(-944.0, -224.0), 'Length')
        equals = controller.add_template_node('DISPATCH_RigVMDispatch_CoreEquals(in A,in B,out Result)', unreal.Vector2D(-496.0, -208.0), 'Equals')
        replace = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_NameReplace', 'Execute', unreal.Vector2D(-848.0, 128.0), 'Replace')
        from_string = controller.add_template_node('DISPATCH_RigDispatch_FromString(in String,out Result)', unreal.Vector2D(-1152.0, 192.0), 'From String')
        to_string = controller.add_template_node('DISPATCH_RigDispatch_ToString(in Value,out Result)', unreal.Vector2D(-656.0, 128.0), 'To String')
        chop = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_StringTruncate', 'Execute', unreal.Vector2D(1104.0, -48.0), 'Chop')
        if1 = controller.add_template_node('DISPATCH_RigVMDispatch_If(in Condition,in True,in False,out Result)', unreal.Vector2D(1456.0, -80.0), 'If')
        for_each = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayIterator(in Array,out Element,out Index,out Count,out Ratio)', unreal.Vector2D(704.0, -336.0), 'For Each')
        ends_with = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_StringEndsWith', 'Execute', unreal.Vector2D(1232.0, -224.0), 'Ends With')
        set_local_name = controller.add_variable_node('local_name', 'FString', None, False, '', unreal.Vector2D(176.0, -336.0), 'Set local_name')
        get_local_name = controller.add_variable_node('local_name', 'FString', None, True, '', unreal.Vector2D(928.0, -224.0), 'Get local_name')
        set_local_name1 = controller.add_variable_node('local_name', 'FString', None, False, '', unreal.Vector2D(1824.0, -352.0), 'Set local_name')
        join = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_StringJoin', 'Execute', unreal.Vector2D(-32.0, -208.0), 'Join')
        get_local_name1 = controller.add_variable_node('local_name', 'FString', None, True, '', unreal.Vector2D(1456.0, 304.0), 'Get local_name')
        if2 = controller.add_template_node('DISPATCH_RigVMDispatch_If(in Condition,in True,in False,out Result)', unreal.Vector2D(-256.0, -160.0), 'If')
        to_string1 = controller.add_template_node('DISPATCH_RigDispatch_ToString(in Value,out Result)', unreal.Vector2D(-944.0, -112.0), 'To String')
        for_loop = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_ForLoopCount', 'Execute', unreal.Vector2D(432.0, -336.0), 'For Loop')
        execute_context = controller.add_free_reroute_node('FRigVMExecuteContext', unreal.load_object(None, '/Script/RigVM.RigVMExecuteContext').get_name(), is_constant=False, custom_widget_name='', default_value='', position=[640.0, 272.0], node_name='', setup_undo_redo=True)

        controller.set_array_pin_size(f'{n(for_each)}.Array', 11)
        controller.set_array_pin_size(f'{n(join)}.Values', 2)

        graph.add_link(entry, 'ExecuteContext', set_local_name, 'ExecuteContext', controller)
        graph.add_link(execute_context, 'Value', return1, 'ExecuteContext', controller)
        graph.add_link(for_loop, 'ExecutePin', for_each, 'ExecuteContext', controller)
        graph.add_link(for_each, 'ExecuteContext', set_local_name1, 'ExecuteContext', controller)
        graph.add_link(set_local_name, 'ExecuteContext', for_loop, 'ExecutePin', controller)
        graph.add_link(entry, 'description', join, 'Values.0', controller)
        graph.add_link(entry, 'joint.Name', replace, 'Name', controller)
        graph.add_link(entry, 'joint.Name', to_string1, 'Value', controller)
        graph.add_link(entry, 'joint_token', length, 'Value', controller)
        graph.add_link(entry, 'joint_token', from_string, 'String', controller)
        graph.add_link(get_local_name1, 'Value', return1, 'Result', controller)
        graph.add_link(length, 'Length', equals, 'A', controller)
        graph.add_link(equals, 'Result', if2, 'Condition', controller)
        graph.add_link(from_string, 'Result', replace, 'Old', controller)
        graph.add_link(replace, 'Result', to_string, 'Value', controller)
        graph.add_link(to_string, 'Result', if2, 'False', controller)
        graph.add_link(get_local_name, 'Value', chop, 'Name', controller)
        graph.add_link(chop, 'Remainder', if1, 'True', controller)
        graph.add_link(ends_with, 'Result', if1, 'Condition', controller)
        graph.add_link(get_local_name, 'Value', if1, 'False', controller)
        graph.add_link(if1, 'Result', set_local_name1, 'Value', controller)
        graph.add_link(for_each, 'Element', ends_with, 'Ending', controller)
        graph.add_link(get_local_name, 'Value', ends_with, 'Name', controller)
        graph.add_link(join, 'Result', set_local_name, 'Value', controller)
        graph.add_link(to_string1, 'Result', if2, 'True', controller)
        graph.add_link(for_loop, 'Completed', execute_context, 'Value', controller)
        graph.add_link(if2, 'Result', join, 'Values.1', controller)

        graph.set_pin(equals, 'B', '0', controller)
        graph.set_pin(chop, 'Count', '1', controller)
        graph.set_pin(chop, 'FromEnd', 'True', controller)
        graph.set_pin(for_each, 'Array', '("0","1","2","3","4","5","6","7","8","9","_")', controller)
        graph.set_pin(join, 'Values', '("","")', controller)
        graph.set_pin(join, 'Separator', '_', controller)
        graph.set_pin(for_loop, 'Count', '3', controller)

    def ZeroOutTransform(self, controller, library):
        entry = 'Entry'
        controller.add_exposed_pin('Argument', unreal.RigVMPinDirection.INPUT, 'FRigElementKey', '/Script/ControlRig.RigElementKey', '(Type=None,Name="None")')
        return1 = 'Return'
        set_transform = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_SetTransform', 'Execute', unreal.Vector2D(992.0, -400.0), 'Set Transform')
        get_transform = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_GetTransform', 'Execute', unreal.Vector2D(176.0, -432.0), 'Get Transform')
        item_exists = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_ItemExists', 'Execute', unreal.Vector2D(-64.0, 176.0), 'Item Exists')
        branch = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_ControlFlowBranch', 'Execute', unreal.Vector2D(224.0, 32.0), 'Branch')

        graph.add_link(entry, 'ExecuteContext', branch, 'ExecuteContext', controller)
        graph.add_link(branch, 'Completed', return1, 'ExecuteContext', controller)
        graph.add_link(entry, 'Argument', set_transform, 'Item', controller)
        graph.add_link(entry, 'Argument', get_transform, 'Item', controller)
        graph.add_link(entry, 'Argument', item_exists, 'Item', controller)
        graph.add_link(branch, 'True', set_transform, 'ExecutePin', controller)
        graph.add_link(get_transform, 'Transform', set_transform, 'Value', controller)
        graph.add_link(item_exists, 'Exists', branch, 'Condition', controller)

        graph.set_pin(set_transform, 'Space', 'GlobalSpace', controller)
        graph.set_pin(set_transform, 'bInitial', 'true', controller)
        graph.set_pin(set_transform, 'Weight', '1.000000', controller)
        graph.set_pin(set_transform, 'bPropagateToChildren', 'True', controller)
        graph.set_pin(get_transform, 'Space', 'GlobalSpace', controller)
        graph.set_pin(get_transform, 'bInitial', 'False', controller)

    def Parent(self, controller, library):

        entry = 'Entry'
        controller.add_exposed_pin('Parent', unreal.RigVMPinDirection.INPUT, 'FRigElementKey', '/Script/ControlRig.RigElementKey', '(Type=None,Name="None")')
        controller.add_exposed_pin('Child', unreal.RigVMPinDirection.INPUT, 'FRigElementKey', '/Script/ControlRig.RigElementKey', '(Type=None,Name="None")')
        return1 = 'Return'
        set_default_parent = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_SetDefaultParent', 'Execute', unreal.Vector2D(272.0, 144.0), 'Set Default Parent')
        vetala_lib_zero_out_transform = controller.add_function_reference_node(library.find_function('vetalaLib_ZeroOutTransform'), unreal.Vector2D(560.0, 0.0), 'vetalaLib_ZeroOutTransform')

        graph.add_link(entry, 'ExecuteContext', set_default_parent, 'ExecutePin', controller)
        graph.add_link(vetala_lib_zero_out_transform, 'ExecuteContext', return1, 'ExecuteContext', controller)
        graph.add_link(set_default_parent, 'ExecutePin', vetala_lib_zero_out_transform, 'ExecuteContext', controller)
        graph.add_link(entry, 'Parent', set_default_parent, 'Parent', controller)
        graph.add_link(entry, 'Child', set_default_parent, 'Child', controller)
        graph.add_link(entry, 'Child', vetala_lib_zero_out_transform, 'Argument', controller)

    def GetItemVector(self, controller, library):

        controller.remove_exposed_pin('ExecuteContext')

        entry = 'Entry'
        return1 = 'Return'

        controller.add_exposed_pin('Vector', unreal.RigVMPinDirection.INPUT, 'TArray<FVector>', '/Script/CoreUObject.Vector', '()')
        controller.add_exposed_pin('index', unreal.RigVMPinDirection.INPUT, 'int32', 'None', '')

        controller.add_exposed_pin('Element', unreal.RigVMPinDirection.OUTPUT, 'FVector', '/Script/CoreUObject.Vector', '(X=0.000000,Y=0.000000,Z=0.000000)')
        num = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayGetNum(in Array,out Num)', unreal.Vector2D(-207.0, 176.0), 'Num')
        greater = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathIntGreater', 'Execute', unreal.Vector2D(22.0, 156.0), 'Greater')
        at = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayGetAtIndex(in Array,in Index,out Element)', unreal.Vector2D(-288.0, 352.0), 'At')
        if1 = controller.add_template_node('DISPATCH_RigVMDispatch_If(in Condition,in True,in False,out Result)', unreal.Vector2D(206.0, 210.0), 'If')

        graph.add_link(entry, 'Vector', num, 'Array', controller)
        graph.add_link(entry, 'Vector', at, 'Array', controller)
        graph.add_link(entry, 'index', at, 'Index', controller)
        graph.add_link(if1, 'Result', return1, 'Element', controller)
        graph.add_link(num, 'Num', greater, 'A', controller)
        graph.add_link(greater, 'Result', if1, 'Condition', controller)
        graph.add_link(at, 'Element', if1, 'True', controller)

        graph.set_pin(greater, 'B', '0', controller)
        graph.set_pin(if1, 'False', '(X=0.000000,Y=0.000000,Z=0.000000)', controller)

    def IK_NudgeLock(self, controller, library):

        entry = 'Entry'
        return1 = 'Return'

        controller.add_exposed_pin('joints', unreal.RigVMPinDirection.INPUT, 'TArray<FRigElementKey>', '/Script/ControlRig.RigElementKey', '()')
        controller.add_exposed_pin('controls', unreal.RigVMPinDirection.INPUT, 'TArray<FRigElementKey>', '/Script/ControlRig.RigElementKey', '()')
        controller.add_exposed_pin('nudge', unreal.RigVMPinDirection.INPUT, 'double', 'None', '')
        controller.add_exposed_pin('lock', unreal.RigVMPinDirection.INPUT, 'double', 'None', '')

        controller.add_exposed_pin('scale1', unreal.RigVMPinDirection.OUTPUT, 'double', 'None', '')
        controller.add_exposed_pin('scale2', unreal.RigVMPinDirection.OUTPUT, 'double', 'None', '')
        distance_between = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorDistance', 'Execute', unreal.Vector2D(-192.0, -928.0), 'Distance Between')
        get_transform = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_GetTransform', 'Execute', unreal.Vector2D(-835.0, -1025.0), 'Get Transform')
        get_transform1 = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_GetTransform', 'Execute', unreal.Vector2D(-835.0, -669.0), 'Get Transform')
        get_transform2 = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_GetTransform', 'Execute', unreal.Vector2D(-835.0, -352.0), 'Get Transform')
        distance_between1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorDistance', 'Execute', unreal.Vector2D(-192.0, -400.0), 'Distance Between')
        get_transform3 = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_GetTransform', 'Execute', unreal.Vector2D(-816.0, 208.0), 'Get Transform')
        get_transform4 = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_GetTransform', 'Execute', unreal.Vector2D(-816.0, 1088.0), 'Get Transform')
        get_transform5 = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_GetTransform', 'Execute', unreal.Vector2D(-816.0, 688.0), 'Get Transform')
        distance_between2 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorDistance', 'Execute', unreal.Vector2D(-192.0, 560.0), 'Distance Between')
        distance_between3 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorDistance', 'Execute', unreal.Vector2D(-192.0, 864.0), 'Distance Between')
        interpolate = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathDoubleLerp', 'Execute', unreal.Vector2D(1056.0, 560.0), 'Interpolate')
        interpolate1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathDoubleLerp', 'Execute', unreal.Vector2D(1056.0, 816.0), 'Interpolate')
        get_controls = controller.add_variable_node_from_object_path('controls', 'TArray<FRigElementKey>', '/Script/ControlRig.RigElementKey', True, '()', unreal.Vector2D(-1792.0, 768.0), 'Get controls')
        multiply = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathDoubleMul', 'Execute', unreal.Vector2D(1056.0, 304.0), 'Multiply')
        add = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathDoubleAdd', 'Execute', unreal.Vector2D(1936.0, 560.0), 'Add')
        add1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathDoubleAdd', 'Execute', unreal.Vector2D(1936.0, 720.0), 'Add')
        get_joints = controller.add_variable_node_from_object_path('joints', 'TArray<FRigElementKey>', '/Script/ControlRig.RigElementKey', True, '()', unreal.Vector2D(-1787.0, -608.0), 'Get joints')
        vetala_lib_get_item = controller.add_function_reference_node(library.find_function('vetalaLib_GetItem'), unreal.Vector2D(-1212.977266, -418.19948), 'vetalaLib_GetItem')
        vetala_lib_get_item1 = controller.add_function_reference_node(library.find_function('vetalaLib_GetItem'), unreal.Vector2D(-1212.977266, -618.19948), 'vetalaLib_GetItem')
        vetala_lib_get_item2 = controller.add_function_reference_node(library.find_function('vetalaLib_GetItem'), unreal.Vector2D(-1212.977266, -818.19948), 'vetalaLib_GetItem')
        vetala_lib_get_item3 = controller.add_function_reference_node(library.find_function('vetalaLib_GetItem'), unreal.Vector2D(-1379.508072, 517.022662), 'vetalaLib_GetItem')
        vetala_lib_get_item4 = controller.add_function_reference_node(library.find_function('vetalaLib_GetItem'), unreal.Vector2D(-1379.508072, 717.022662), 'vetalaLib_GetItem')
        vetala_lib_get_item5 = controller.add_function_reference_node(library.find_function('vetalaLib_GetItem'), unreal.Vector2D(-1379.508072, 917.022662), 'vetalaLib_GetItem')

        graph.add_link(entry, 'ExecuteContext', return1, 'ExecuteContext', controller)
        graph.add_link(entry, 'nudge', multiply, 'A', controller)
        graph.add_link(entry, 'lock', interpolate, 'T', controller)
        graph.add_link(entry, 'lock', interpolate1, 'T', controller)
        graph.add_link(add, 'Result', return1, 'scale1', controller)
        graph.add_link(add1, 'Result', return1, 'scale2', controller)
        graph.add_link(get_transform, 'Transform.Translation', distance_between, 'A', controller)
        graph.add_link(get_transform1, 'Transform.Translation', distance_between, 'B', controller)
        graph.add_link(distance_between, 'Result', interpolate, 'A', controller)
        graph.add_link(vetala_lib_get_item, 'Element', get_transform, 'Item', controller)
        graph.add_link(vetala_lib_get_item1, 'Element', get_transform1, 'Item', controller)
        graph.add_link(get_transform1, 'Transform.Translation', distance_between1, 'A', controller)
        graph.add_link(vetala_lib_get_item2, 'Element', get_transform2, 'Item', controller)
        graph.add_link(get_transform2, 'Transform.Translation', distance_between1, 'B', controller)
        graph.add_link(distance_between1, 'Result', interpolate1, 'A', controller)
        graph.add_link(vetala_lib_get_item3, 'Element', get_transform3, 'Item', controller)
        graph.add_link(get_transform3, 'Transform.Translation', distance_between2, 'A', controller)
        graph.add_link(vetala_lib_get_item5, 'Element', get_transform4, 'Item', controller)
        graph.add_link(get_transform4, 'Transform.Translation', distance_between3, 'B', controller)
        graph.add_link(vetala_lib_get_item4, 'Element', get_transform5, 'Item', controller)
        graph.add_link(get_transform5, 'Transform.Translation', distance_between2, 'B', controller)
        graph.add_link(get_transform5, 'Transform.Translation', distance_between3, 'A', controller)
        graph.add_link(distance_between2, 'Result', interpolate, 'B', controller)
        graph.add_link(distance_between3, 'Result', interpolate1, 'B', controller)
        graph.add_link(interpolate, 'Result', add, 'B', controller)
        graph.add_link(interpolate1, 'Result', add1, 'B', controller)
        graph.add_link(get_controls, 'Value', vetala_lib_get_item3, 'Array', controller)
        graph.add_link(get_controls, 'Value', vetala_lib_get_item4, 'Array', controller)
        graph.add_link(get_controls, 'Value', vetala_lib_get_item5, 'Array', controller)
        graph.add_link(multiply, 'Result', add, 'A', controller)
        graph.add_link(multiply, 'Result', add1, 'A', controller)
        graph.add_link(get_joints, 'Value', vetala_lib_get_item, 'Array', controller)
        graph.add_link(get_joints, 'Value', vetala_lib_get_item1, 'Array', controller)
        graph.add_link(get_joints, 'Value', vetala_lib_get_item2, 'Array', controller)

        graph.set_pin(get_transform, 'Space', 'GlobalSpace', controller)
        graph.set_pin(get_transform, 'bInitial', 'true', controller)
        graph.set_pin(get_transform1, 'Space', 'GlobalSpace', controller)
        graph.set_pin(get_transform1, 'bInitial', 'true', controller)
        graph.set_pin(get_transform2, 'Space', 'GlobalSpace', controller)
        graph.set_pin(get_transform2, 'bInitial', 'true', controller)
        graph.set_pin(get_transform3, 'Space', 'GlobalSpace', controller)
        graph.set_pin(get_transform3, 'bInitial', 'False', controller)
        graph.set_pin(get_transform4, 'Space', 'GlobalSpace', controller)
        graph.set_pin(get_transform4, 'bInitial', 'False', controller)
        graph.set_pin(get_transform5, 'Space', 'GlobalSpace', controller)
        graph.set_pin(get_transform5, 'bInitial', 'False', controller)
        graph.set_pin(multiply, 'B', '0.010000', controller)
        graph.set_pin(vetala_lib_get_item1, 'index', '1', controller)
        graph.set_pin(vetala_lib_get_item2, 'index', '2', controller)
        graph.set_pin(vetala_lib_get_item4, 'index', '1', controller)
        graph.set_pin(vetala_lib_get_item5, 'index', '2', controller)

    def findPoleAxis(self, controller, library):
        entry = 'Entry'
        controller.add_exposed_pin('Bones', unreal.RigVMPinDirection.INPUT, 'TArray<FRigElementKey>', '/Script/ControlRig.RigElementKey', '()')
        controller.add_exposed_pin('Multiply', unreal.RigVMPinDirection.INPUT, 'FVector', '/Script/CoreUObject.Vector', '(X=0.000000,Y=0.000000,Z=0.000000)')
        return1 = 'Return'
        controller.add_exposed_pin('PoleAxis', unreal.RigVMPinDirection.OUTPUT, 'FVector', '/Script/CoreUObject.Vector', '(X=0.000000,Y=0.000000,Z=0.000000)')
        at = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayGetAtIndex(in Array,in Index,out Element)', unreal.Vector2D(32.0, 128.0), 'At')
        at1 = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayGetAtIndex(in Array,in Index,out Element)', unreal.Vector2D(32.0, 272.0), 'At')
        at2 = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayGetAtIndex(in Array,in Index,out Element)', unreal.Vector2D(32.0, 416.0), 'At')
        get_transform = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_GetTransform', 'Execute', unreal.Vector2D(336.0, 192.0), 'Get Transform')
        get_transform1 = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_GetTransform', 'Execute', unreal.Vector2D(336.0, 512.0), 'Get Transform')
        get_transform2 = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_GetTransform', 'Execute', unreal.Vector2D(336.0, 816.0), 'Get Transform')
        length = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorLength', 'Execute', unreal.Vector2D(1027.0, -19.0), 'Length')
        subtract = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorSub', 'Execute', unreal.Vector2D(768.0, 96.0), 'Subtract')
        subtract1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorSub', 'Execute', unreal.Vector2D(800.0, -160.0), 'Subtract')
        dot = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorDot', 'Execute', unreal.Vector2D(1027.0, -131.0), 'Dot')
        divide = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathFloatDiv', 'Execute', unreal.Vector2D(1187.0, -83.0), 'Divide')
        unit = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorUnit', 'Execute', unreal.Vector2D(1299.0, 108.0), 'Unit')
        scale = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorScale', 'Execute', unreal.Vector2D(1491.0, 108.0), 'Scale')
        subtract2 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorSub', 'Execute', unreal.Vector2D(1699.0, -67.0), 'Subtract')
        unit1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorUnit', 'Execute', unreal.Vector2D(1864.298206, 119.150747), 'Unit')
        multiply = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorMul', 'Execute', unreal.Vector2D(2016.0, 192.0), 'Multiply')

        graph.add_link(entry, 'ExecuteContext', return1, 'ExecuteContext', controller)
        graph.add_link(entry, 'Bones', at, 'Array', controller)
        graph.add_link(entry, 'Bones', at1, 'Array', controller)
        graph.add_link(entry, 'Bones', at2, 'Array', controller)
        graph.add_link(entry, 'Multiply', multiply, 'B', controller)
        graph.add_link(multiply, 'Result', return1, 'PoleAxis', controller)
        graph.add_link(at, 'Element', get_transform, 'Item', controller)
        graph.add_link(at1, 'Element', get_transform1, 'Item', controller)
        graph.add_link(at2, 'Element', get_transform2, 'Item', controller)
        graph.add_link(get_transform, 'Transform.Translation', subtract1, 'B', controller)
        graph.add_link(get_transform, 'Transform.Translation', subtract, 'B', controller)
        graph.add_link(get_transform1, 'Transform.Translation', subtract1, 'A', controller)
        graph.add_link(get_transform2, 'Transform.Translation', subtract, 'A', controller)
        graph.add_link(subtract, 'Result', length, 'Value', controller)
        graph.add_link(length, 'Result', divide, 'B', controller)
        graph.add_link(subtract, 'Result', unit, 'Value', controller)
        graph.add_link(subtract, 'Result', dot, 'B', controller)
        graph.add_link(subtract1, 'Result', dot, 'A', controller)
        graph.add_link(subtract1, 'Result', subtract2, 'A', controller)
        graph.add_link(dot, 'Result', divide, 'A', controller)
        graph.add_link(divide, 'Result', scale, 'Factor', controller)
        graph.add_link(unit, 'Result', scale, 'Value', controller)
        graph.add_link(scale, 'Result', subtract2, 'B', controller)
        graph.add_link(subtract2, 'Result', unit1, 'Value', controller)
        graph.add_link(unit1, 'Result', multiply, 'A', controller)

        graph.set_pin(at, 'Index', '0', controller)
        graph.set_pin(at1, 'Index', '1', controller)
        graph.set_pin(at2, 'Index', '2', controller)
        graph.set_pin(get_transform, 'Space', 'GlobalSpace', controller)
        graph.set_pin(get_transform, 'bInitial', 'False', controller)
        graph.set_pin(get_transform1, 'Space', 'GlobalSpace', controller)
        graph.set_pin(get_transform1, 'bInitial', 'False', controller)
        graph.set_pin(get_transform2, 'Space', 'GlobalSpace', controller)
        graph.set_pin(get_transform2, 'bInitial', 'False', controller)

    def findBoneAimAxis(self, controller, library):
        entry = 'Entry'
        controller.add_exposed_pin('Bone', unreal.RigVMPinDirection.INPUT, 'FRigElementKey', '/Script/ControlRig.RigElementKey', '(Type=None,Name="None")')
        return1 = 'Return'
        controller.add_exposed_pin('Result', unreal.RigVMPinDirection.OUTPUT, 'FVector', '/Script/CoreUObject.Vector', '(X=0.000000,Y=0.000000,Z=0.000000)')
        get_children = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_CollectionChildrenArray', 'Execute', unreal.Vector2D(-832.0, -832.0), 'Get Children')
        get_transform = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_GetTransform', 'Execute', unreal.Vector2D(-840.0, -288.0), 'Get Transform')
        to_vectors = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathMatrixToVectors', 'Execute', unreal.Vector2D(432.0, 720.0), 'To Vectors')
        from_transform = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathMatrixFromTransformV2', 'Execute', unreal.Vector2D(-512.0, -128.0), 'From Transform')
        get_transform1 = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_GetTransform', 'Execute', unreal.Vector2D(208.0, -848.0), 'Get Transform')
        dot = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorDot', 'Execute', unreal.Vector2D(1280.0, 672.0), 'Dot')
        subtract = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorSub', 'Execute', unreal.Vector2D(576.0, -16.0), 'Subtract')
        unit = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorUnit', 'Execute', unreal.Vector2D(784.0, 32.0), 'Unit')
        dot1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorDot', 'Execute', unreal.Vector2D(1280.0, 480.0), 'Dot')
        dot2 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorDot', 'Execute', unreal.Vector2D(1280.0, 256.0), 'Dot')
        make_vector = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorMake', 'Execute', unreal.Vector2D(1664.0, 352.0), 'Make Vector')
        at = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayGetAtIndex(in Array,in Index,out Element)', unreal.Vector2D(-256.0, -768.0), 'At')

        graph.add_link(entry, 'ExecuteContext', return1, 'ExecuteContext', controller)
        graph.add_link(entry, 'Bone', get_children, 'Parent', controller)
        graph.add_link(entry, 'Bone', get_transform, 'Item', controller)
        graph.add_link(make_vector, 'Result', return1, 'Result', controller)
        graph.add_link(get_children, 'Items', at, 'Array', controller)
        graph.add_link(get_transform, 'Transform', from_transform, 'Value', controller)
        graph.add_link(from_transform, 'Result', to_vectors, 'Value', controller)
        graph.add_link(to_vectors, 'Origin', subtract, 'B', controller)
        graph.add_link(to_vectors, 'X', dot2, 'B', controller)
        graph.add_link(to_vectors, 'Y', dot1, 'B', controller)
        graph.add_link(to_vectors, 'Z', dot, 'B', controller)
        graph.add_link(at, 'Element', get_transform1, 'Item', controller)
        graph.add_link(get_transform1, 'Transform.Translation', subtract, 'A', controller)
        graph.add_link(unit, 'Result', dot, 'A', controller)
        graph.add_link(dot, 'Result', make_vector, 'Z', controller)
        graph.add_link(subtract, 'Result', unit, 'Value', controller)
        graph.add_link(unit, 'Result', dot1, 'A', controller)
        graph.add_link(unit, 'Result', dot2, 'A', controller)
        graph.add_link(dot1, 'Result', make_vector, 'Y', controller)
        graph.add_link(dot2, 'Result', make_vector, 'X', controller)

        graph.set_pin(get_children, 'bIncludeParent', 'False', controller)
        graph.set_pin(get_children, 'bRecursive', 'False', controller)
        graph.set_pin(get_children, 'bDefaultChildren', 'True', controller)
        graph.set_pin(get_children, 'TypeToSearch', 'Bone', controller)
        graph.set_pin(get_transform, 'Space', 'GlobalSpace', controller)
        graph.set_pin(get_transform, 'bInitial', 'False', controller)
        graph.set_pin(get_transform1, 'Space', 'GlobalSpace', controller)
        graph.set_pin(get_transform1, 'bInitial', 'False', controller)
        graph.set_pin(at, 'Index', '0', controller)

    def MirrorTransform(self, controller, library):

        controller.remove_exposed_pin('ExecuteContext')

        entry = 'Entry'
        controller.add_exposed_pin('Transform', unreal.RigVMPinDirection.INPUT, 'FTransform', '/Script/CoreUObject.Transform', '(Rotation=(X=0.000000,Y=0.000000,Z=0.000000,W=1.000000),Translation=(X=0.000000,Y=0.000000,Z=0.000000),Scale3D=(X=1.000000,Y=1.000000,Z=1.000000))')
        controller.add_exposed_pin('Axis', unreal.RigVMPinDirection.INPUT, 'FVector', '/Script/CoreUObject.Vector', '(X=0.000000,Y=0.000000,Z=0.000000)')
        controller.add_exposed_pin('Translate', unreal.RigVMPinDirection.INPUT, 'bool', 'None', '')
        return1 = 'Return'
        controller.add_exposed_pin('MirrorTransform', unreal.RigVMPinDirection.OUTPUT, 'FTransform', '/Script/CoreUObject.Transform', '(Rotation=(X=0.000000,Y=0.000000,Z=0.000000,W=1.000000),Translation=(X=0.000000,Y=0.000000,Z=0.000000),Scale3D=(X=1.000000,Y=1.000000,Z=1.000000))')
        to_vectors = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathMatrixToVectors', 'Execute', unreal.Vector2D(64.0, 112.0), 'To Vectors')
        from_transform = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathMatrixFromTransformV2', 'Execute', unreal.Vector2D(-128.758911, 108.623108), 'From Transform')
        from_vectors = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathMatrixFromVectors', 'Execute', unreal.Vector2D(1472.0, 128.0), 'From Vectors')
        to_transform = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathMatrixToTransform', 'Execute', unreal.Vector2D(1685.0, 144.0), 'To Transform')
        multiply = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorMul', 'Execute', unreal.Vector2D(-784.0, 480.0), 'Multiply')
        equals = controller.add_template_node('DISPATCH_RigVMDispatch_CoreEquals(in A,in B,out Result)', unreal.Vector2D(-432.0, 640.0), 'Equals')
        if1 = controller.add_template_node('DISPATCH_RigVMDispatch_If(in Condition,in True,in False,out Result)', unreal.Vector2D(-272.0, 656.0), 'If')
        if2 = controller.add_template_node('DISPATCH_RigVMDispatch_If(in Condition,in True,in False,out Result)', unreal.Vector2D(-272.0, 816.0), 'If')
        equals1 = controller.add_template_node('DISPATCH_RigVMDispatch_CoreEquals(in A,in B,out Result)', unreal.Vector2D(-432.0, 800.0), 'Equals')
        if3 = controller.add_template_node('DISPATCH_RigVMDispatch_If(in Condition,in True,in False,out Result)', unreal.Vector2D(-272.0, 976.0), 'If')
        equals2 = controller.add_template_node('DISPATCH_RigVMDispatch_CoreEquals(in A,in B,out Result)', unreal.Vector2D(-432.0, 960.0), 'Equals')
        make_vector = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorMake', 'Execute', unreal.Vector2D(-16.0, 928.0), 'Make Vector')
        multiply1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorMul', 'Execute', unreal.Vector2D(688.0, 48.0), 'Multiply')
        multiply2 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorMul', 'Execute', unreal.Vector2D(688.0, 528.0), 'Multiply')
        multiply3 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorMul', 'Execute', unreal.Vector2D(688.0, 368.0), 'Multiply')
        multiply4 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathVectorMul', 'Execute', unreal.Vector2D(688.0, 208.0), 'Multiply')
        if4 = controller.add_template_node('DISPATCH_RigVMDispatch_If(in Condition,in True,in False,out Result)', unreal.Vector2D(688.0, -128.0), 'If')

        graph.add_link(entry, 'Transform', from_transform, 'Value', controller)
        graph.add_link(entry, 'Axis', multiply, 'A', controller)
        graph.add_link(entry, 'Translate', if4, 'Condition', controller)
        graph.add_link(to_transform, 'Result', return1, 'MirrorTransform', controller)
        graph.add_link(from_transform, 'Result', to_vectors, 'Value', controller)
        graph.add_link(to_vectors, 'Origin', multiply1, 'A', controller)
        graph.add_link(to_vectors, 'Origin', if4, 'False', controller)
        graph.add_link(to_vectors, 'X', multiply4, 'A', controller)
        graph.add_link(to_vectors, 'Y', multiply3, 'A', controller)
        graph.add_link(to_vectors, 'Z', multiply2, 'A', controller)
        graph.add_link(if4, 'Result', from_vectors, 'Origin', controller)
        graph.add_link(multiply4, 'Result', from_vectors, 'X', controller)
        graph.add_link(multiply3, 'Result', from_vectors, 'Y', controller)
        graph.add_link(multiply2, 'Result', from_vectors, 'Z', controller)
        graph.add_link(from_vectors, 'Result', to_transform, 'Value', controller)
        graph.add_link(multiply, 'Result.X', equals, 'A', controller)
        graph.add_link(multiply, 'Result.X', if1, 'False', controller)
        graph.add_link(multiply, 'Result.Y', equals1, 'A', controller)
        graph.add_link(multiply, 'Result.Y', if2, 'False', controller)
        graph.add_link(multiply, 'Result.Z', equals2, 'A', controller)
        graph.add_link(multiply, 'Result.Z', if3, 'False', controller)
        graph.add_link(equals, 'Result', if1, 'Condition', controller)
        graph.add_link(if1, 'Result', make_vector, 'X', controller)
        graph.add_link(equals1, 'Result', if2, 'Condition', controller)
        graph.add_link(if2, 'Result', make_vector, 'Y', controller)
        graph.add_link(equals2, 'Result', if3, 'Condition', controller)
        graph.add_link(if3, 'Result', make_vector, 'Z', controller)
        graph.add_link(make_vector, 'Result', multiply1, 'B', controller)
        graph.add_link(make_vector, 'Result', multiply2, 'B', controller)
        graph.add_link(make_vector, 'Result', multiply3, 'B', controller)
        graph.add_link(make_vector, 'Result', multiply4, 'B', controller)
        graph.add_link(multiply1, 'Result', if4, 'True', controller)

        graph.set_pin(multiply, 'B', '(X=-1.000000,Y=-1.000000,Z=-1.000000)', controller)
        graph.set_pin(equals, 'B', '0.000000', controller)
        graph.set_pin(if1, 'True', '1.000000', controller)
        graph.set_pin(if2, 'True', '1.000000', controller)
        graph.set_pin(equals1, 'B', '0.000000', controller)
        graph.set_pin(if3, 'True', '1.000000', controller)
        graph.set_pin(equals2, 'B', '0.000000', controller)

    def Control(self, controller, library):

        controller.add_local_variable_from_object_path('last_description', 'FString', '', '')

        entry = 'Entry'
        controller.add_exposed_pin('increment', unreal.RigVMPinDirection.INPUT, 'int32', 'None', '0')
        controller.add_exposed_pin('parent', unreal.RigVMPinDirection.INPUT, 'FRigElementKey', '/Script/ControlRig.RigElementKey', '(Type=None,Name="None")')
        controller.add_exposed_pin('driven', unreal.RigVMPinDirection.INPUT, 'FRigElementKey', '/Script/ControlRig.RigElementKey', '(Type=None,Name="None")')
        controller.add_exposed_pin('description', unreal.RigVMPinDirection.INPUT, 'FString', 'None', '')
        controller.add_exposed_pin('side', unreal.RigVMPinDirection.INPUT, 'FString', 'None', '')
        controller.add_exposed_pin('joint_token', unreal.RigVMPinDirection.INPUT, 'FString', 'None', '')
        controller.add_exposed_pin('sub_count', unreal.RigVMPinDirection.INPUT, 'int32', 'None', '0')
        controller.add_exposed_pin('restrain_numbering', unreal.RigVMPinDirection.INPUT, 'bool', 'None', 'false')
        controller.add_exposed_pin('shape', unreal.RigVMPinDirection.INPUT, 'FString', 'None', '')
        controller.add_exposed_pin('color', unreal.RigVMPinDirection.INPUT, 'TArray<FLinearColor>', '/Script/CoreUObject.LinearColor', '((R=0,G=0,B=0,A=0.000000))')
        controller.add_exposed_pin('sub_color', unreal.RigVMPinDirection.INPUT, 'TArray<FLinearColor>', '/Script/CoreUObject.LinearColor', '((R=0,G=0,B=0,A=0.000000))')
        controller.add_exposed_pin('translate', unreal.RigVMPinDirection.INPUT, 'TArray<FVector>', '/Script/CoreUObject.Vector', '()')
        controller.add_exposed_pin('rotate', unreal.RigVMPinDirection.INPUT, 'TArray<FVector>', '/Script/CoreUObject.Vector', '()')
        controller.add_exposed_pin('scale', unreal.RigVMPinDirection.INPUT, 'TArray<FVector>', '/Script/CoreUObject.Vector', '()')
        controller.add_exposed_pin('world', unreal.RigVMPinDirection.INPUT, 'bool', 'None', '')
        controller.add_exposed_pin('mirror', unreal.RigVMPinDirection.INPUT, 'bool', 'None', '')
        return1 = 'Return'
        controller.add_exposed_pin('Last Control', unreal.RigVMPinDirection.OUTPUT, 'FRigElementKey', '/Script/ControlRig.RigElementKey', '(Type=None,Name="None")')
        controller.add_exposed_pin('Control', unreal.RigVMPinDirection.OUTPUT, 'FRigElementKey', '/Script/ControlRig.RigElementKey', '(Type=None,Name="None")')
        controller.add_exposed_pin('Sub Controls', unreal.RigVMPinDirection.OUTPUT, 'TArray<FRigElementKey>', '/Script/ControlRig.RigElementKey', '()')
        spawn_transform_control = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_HierarchyAddControlTransform', 'Execute', unreal.Vector2D(992.0, -16.0), 'Spawn Transform Control')
        get_description = controller.add_variable_node('description', 'FString', None, True, '', unreal.Vector2D(-284.0, 1008.0), 'Get description')
        get_restrain_numbering = controller.add_variable_node('restrain_numbering', 'bool', None, True, '', unreal.Vector2D(-348.0, 1168.0), 'Get restrain_numbering')
        get_increment = controller.add_variable_node('increment', 'int32', None, True, '', unreal.Vector2D(-416.0, 1488.0), 'Get increment')
        get_side = controller.add_variable_node('side', 'FString', None, True, '', unreal.Vector2D(-284.0, 1088.0), 'Get side')
        at = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayGetAtIndex(in Array,in Index,out Element)', unreal.Vector2D(176.0, 64.0), 'At')
        from_euler = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathQuaternionFromEuler', 'Execute', unreal.Vector2D(64.0, 592.0), 'From Euler')
        from_string = controller.add_template_node('DISPATCH_RigDispatch_FromString(in String,out Result)', unreal.Vector2D(64.0, 192.0), 'From String')
        at1 = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayGetAtIndex(in Array,in Index,out Element)', unreal.Vector2D(1712.0, 384.0), 'At')
        get_sub_count = controller.add_variable_node('sub_count', 'int32', None, True, '', unreal.Vector2D(1712.0, 272.0), 'Get sub_count')
        at2 = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayGetAtIndex(in Array,in Index,out Element)', unreal.Vector2D(608.0, 512.0), 'At')
        at3 = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayGetAtIndex(in Array,in Index,out Element)', unreal.Vector2D(-128.0, 592.0), 'At')
        at4 = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayGetAtIndex(in Array,in Index,out Element)', unreal.Vector2D(608.0, 624.0), 'At')
        set_item_array_metadata = controller.add_template_node('DISPATCH_RigDispatch_SetMetadata(in Item,in Name,in NameSpace,in Value,out Success)', unreal.Vector2D(2432.0, -208.0), 'Set Item Array Metadata')
        set_last_description = controller.add_variable_node('last_description', 'FString', None, False, '', unreal.Vector2D(3616.0, -208.0), 'Set last_description')
        greater = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathIntGreater', 'Execute', unreal.Vector2D(32.0, 1440.0), 'Greater')
        get_description1 = controller.add_variable_node('description', 'FString', None, True, '', unreal.Vector2D(3440.0, -64.0), 'Get description')
        get_last_description = controller.add_variable_node('last_description', 'FString', None, True, '', unreal.Vector2D(-240.0, 1696.0), 'Get last_description')
        and1 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathBoolAnd', 'Execute', unreal.Vector2D(336.0, 1520.0), 'And')
        if1 = controller.add_template_node('DISPATCH_RigVMDispatch_If(in Condition,in True,in False,out Result)', unreal.Vector2D(512.0, 1520.0), 'If')
        equals = controller.add_template_node('DISPATCH_RigVMDispatch_CoreEquals(in A,in B,out Result)', unreal.Vector2D(32.0, 1584.0), 'Equals')
        make_relative = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathTransformMakeRelative', 'Execute', unreal.Vector2D(800.0, -336.0), 'Make Relative')
        get_transform = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_GetTransform', 'Execute', unreal.Vector2D(-144.0, -352.0), 'Get Transform')
        get_transform1 = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_GetTransform', 'Execute', unreal.Vector2D(176.0, -560.0), 'Get Transform')
        if2 = controller.add_template_node('DISPATCH_RigVMDispatch_If(in Condition,in True,in False,out Result)', unreal.Vector2D(512.0, -592.0), 'If')
        if3 = controller.add_template_node('DISPATCH_RigVMDispatch_If(in Condition,in True,in False,out Result)', unreal.Vector2D(1104.0, -528.0), 'If')
        shape_exists = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_ShapeExists', 'Execute', unreal.Vector2D(208.0, 336.0), 'Shape Exists')
        if4 = controller.add_template_node('DISPATCH_RigVMDispatch_If(in Condition,in True,in False,out Result)', unreal.Vector2D(688.0, 224.0), 'If')
        not_equals = controller.add_template_node('DISPATCH_RigVMDispatch_CoreNotEquals(in A,in B,out Result)', unreal.Vector2D(288.0, 192.0), 'Not Equals')
        and2 = controller.add_unit_node_from_struct_path('/Script/RigVM.RigVMFunction_MathBoolAnd', 'Execute', unreal.Vector2D(464.0, 304.0), 'And')
        for_each = controller.add_template_node('DISPATCH_RigVMDispatch_ArrayIterator(in Array,out Element,out Index,out Count,out Ratio)', unreal.Vector2D(2720.0, -208.0), 'For Each')
        set_item_metadata = controller.add_template_node('DISPATCH_RigDispatch_SetMetadata(in Item,in Name,in NameSpace,in Value,out Success)', unreal.Vector2D(2960.0, -208.0), 'Set Item Metadata')
        vetala_lib_construct_name = controller.add_function_reference_node(library.find_function('vetalaLib_ConstructName'), unreal.Vector2D(300.0, 800.0), 'vetalaLib_ConstructName')
        vetala_lib_control_sub = controller.add_function_reference_node(library.find_function('vetalaLib_ControlSub'), unreal.Vector2D(2100.0, 100.0), 'vetalaLib_ControlSub')
        vetala_lib_mirror_transform = controller.add_function_reference_node(library.find_function('vetalaLib_MirrorTransform'), unreal.Vector2D(750.0, -700.0), 'vetalaLib_MirrorTransform')
        item_exists = controller.add_unit_node_from_struct_path('/Script/ControlRig.RigUnit_ItemExists', 'Execute', unreal.Vector2D(160.0, -112.0), 'Item Exists')
        if5 = controller.add_template_node('DISPATCH_RigVMDispatch_If(in Condition,in True,in False,out Result)', unreal.Vector2D(496.0, -208.0), 'If')

        graph.add_link(entry, 'ExecuteContext', spawn_transform_control, 'ExecuteContext', controller)
        graph.add_link(set_last_description, 'ExecuteContext', return1, 'ExecuteContext', controller)
        graph.add_link(spawn_transform_control, 'ExecuteContext', vetala_lib_control_sub, 'ExecuteContext', controller)
        graph.add_link(vetala_lib_control_sub, 'ExecuteContext', set_item_array_metadata, 'ExecuteContext', controller)
        graph.add_link(set_item_array_metadata, 'ExecuteContext', for_each, 'ExecuteContext', controller)
        graph.add_link(for_each, 'Completed', set_last_description, 'ExecuteContext', controller)
        graph.add_link(for_each, 'ExecuteContext', set_item_metadata, 'ExecuteContext', controller)
        graph.add_link(entry, 'parent', spawn_transform_control, 'Parent', controller)
        graph.add_link(entry, 'parent', get_transform, 'Item', controller)
        graph.add_link(entry, 'parent', item_exists, 'Item', controller)
        graph.add_link(entry, 'driven', get_transform1, 'Item', controller)
        graph.add_link(entry, 'shape', from_string, 'String', controller)
        graph.add_link(entry, 'color', at, 'Array', controller)
        graph.add_link(entry, 'sub_color', at1, 'Array', controller)
        graph.add_link(entry, 'translate', at2, 'Array', controller)
        graph.add_link(entry, 'rotate', at3, 'Array', controller)
        graph.add_link(entry, 'scale', at4, 'Array', controller)
        graph.add_link(entry, 'world', if2, 'Condition', controller)
        graph.add_link(entry, 'mirror', if3, 'Condition', controller)
        graph.add_link(vetala_lib_control_sub, 'LastSubControl', return1, 'Last Control', controller)
        graph.add_link(spawn_transform_control, 'Item', return1, 'Control', controller)
        graph.add_link(vetala_lib_construct_name, 'Result', spawn_transform_control, 'Name', controller)
        graph.add_link(spawn_transform_control, 'Item', set_item_array_metadata, 'Item', controller)
        graph.add_link(spawn_transform_control, 'Item', set_item_metadata, 'Value', controller)
        graph.add_link(spawn_transform_control, 'Item', vetala_lib_control_sub, 'control', controller)
        graph.add_link(make_relative, 'Local', spawn_transform_control, 'OffsetTransform', controller)
        graph.add_link(get_description, 'Value', equals, 'A', controller)
        graph.add_link(get_description, 'Value', vetala_lib_construct_name, 'Description', controller)
        graph.add_link(get_restrain_numbering, 'Value', vetala_lib_construct_name, 'RestrainNumbering', controller)
        graph.add_link(get_increment, 'Value', greater, 'A', controller)
        graph.add_link(get_increment, 'Value', if1, 'True', controller)
        graph.add_link(get_increment, 'Value', vetala_lib_construct_name, 'Number', controller)
        graph.add_link(get_side, 'Value', vetala_lib_construct_name, 'Side', controller)
        graph.add_link(at3, 'Element', from_euler, 'Euler', controller)
        graph.add_link(from_string, 'Result', shape_exists, 'ShapeName', controller)
        graph.add_link(from_string, 'Result', if4, 'True', controller)
        graph.add_link(from_string, 'Result', not_equals, 'A', controller)
        graph.add_link(at1, 'Element', vetala_lib_control_sub, 'color', controller)
        graph.add_link(get_sub_count, 'Value', vetala_lib_control_sub, 'sub_count', controller)
        graph.add_link(vetala_lib_control_sub, 'SubControls', set_item_array_metadata, 'Value', controller)
        graph.add_link(get_description1, 'Value', set_last_description, 'Value', controller)
        graph.add_link(greater, 'Result', and1, 'A', controller)
        graph.add_link(get_last_description, 'Value', equals, 'B', controller)
        graph.add_link(equals, 'Result', and1, 'B', controller)
        graph.add_link(and1, 'Result', if1, 'Condition', controller)
        graph.add_link(if3, 'Result', make_relative, 'Global', controller)
        graph.add_link(if5, 'Result', make_relative, 'Parent', controller)
        graph.add_link(get_transform, 'Transform', if5, 'True', controller)
        graph.add_link(get_transform1, 'Transform', if2, 'False', controller)
        graph.add_link(if2, 'Result', if3, 'False', controller)
        graph.add_link(if2, 'Result', vetala_lib_mirror_transform, 'Transform', controller)
        graph.add_link(vetala_lib_mirror_transform, 'MirrorTransform', if3, 'True', controller)
        graph.add_link(shape_exists, 'Result', and2, 'B', controller)
        graph.add_link(and2, 'Result', if4, 'Condition', controller)
        graph.add_link(not_equals, 'Result', and2, 'A', controller)
        graph.add_link(vetala_lib_control_sub, 'SubControls', for_each, 'Array', controller)
        graph.add_link(for_each, 'Element', set_item_metadata, 'Item', controller)
        graph.add_link(item_exists, 'Exists', if5, 'Condition', controller)
        graph.add_link(get_transform1, 'Transform.Translation', if2, 'True.Translation', controller)
        graph.add_link(if4, 'Result', spawn_transform_control, 'Settings.Shape.Name', controller)
        graph.add_link(at, 'Element', spawn_transform_control, 'Settings.Shape.Color', controller)
        graph.add_link(from_euler, 'Result', spawn_transform_control, 'Settings.Shape.Transform.Rotation', controller)
        graph.add_link(at2, 'Element', spawn_transform_control, 'Settings.Shape.Transform.Translation', controller)
        graph.add_link(at4, 'Element', spawn_transform_control, 'Settings.Shape.Transform.Scale3D', controller)

        graph.set_pin(spawn_transform_control, 'OffsetSpace', 'LocalSpace', controller)
        graph.set_pin(spawn_transform_control, 'InitialValue', '(Rotation=(X=0.000000,Y=0.000000,Z=0.000000,W=1.000000),Translation=(X=0.000000,Y=0.000000,Z=0.000000),Scale3D=(X=1.000000,Y=1.000000,Z=1.000000))', controller)
        graph.set_pin(spawn_transform_control, 'Settings', '(InitialSpace=LocalSpace,Shape=(bVisible=True,Name="Circle_Thin",Color=(R=1.000000,G=0.000000,B=0.000000,A=1.000000),Transform=(Rotation=(X=0.000000,Y=0.000000,Z=0.000000,W=1.000000),Translation=(X=0.000000,Y=0.000000,Z=0.000000),Scale3D=(X=1.000000,Y=1.000000,Z=1.000000))),Proxy=(bIsProxy=False,ShapeVisibility=BasedOnSelection),FilteredChannels=(),DisplayName="None",bUsePreferredRotationOrder=False,PreferredRotationOrder=YZX,Limits=(LimitTranslationX=(bMinimum=False,bMaximum=False),LimitTranslationY=(bMinimum=False,bMaximum=False),LimitTranslationZ=(bMinimum=False,bMaximum=False),LimitPitch=(bMinimum=False,bMaximum=False),LimitYaw=(bMinimum=False,bMaximum=False),LimitRoll=(bMinimum=False,bMaximum=False),LimitScaleX=(bMinimum=False,bMaximum=False),LimitScaleY=(bMinimum=False,bMaximum=False),LimitScaleZ=(bMinimum=False,bMaximum=False),MinValue=(Location=(X=-100.000000,Y=-100.000000,Z=-100.000000),Rotation=(Pitch=-180.000000,Yaw=-180.000000,Roll=-180.000000),Scale=(X=0.000000,Y=0.000000,Z=0.000000)),MaxValue=(Location=(X=100.000000,Y=100.000000,Z=100.000000),Rotation=(Pitch=180.000000,Yaw=180.000000,Roll=180.000000),Scale=(X=10.000000,Y=10.000000,Z=10.000000)),bDrawLimits=True))', controller)
        graph.set_pin(at, 'Index', '0', controller)
        graph.set_pin(from_euler, 'RotationOrder', 'XZY', controller)
        graph.set_pin(at1, 'Index', '0', controller)
        graph.set_pin(at2, 'Index', '0', controller)
        graph.set_pin(at3, 'Index', '0', controller)
        graph.set_pin(at4, 'Index', '0', controller)
        graph.set_pin(set_item_array_metadata, 'Name', 'Sub', controller)
        graph.set_pin(set_item_array_metadata, 'NameSpace', 'Self', controller)
        graph.set_pin(greater, 'B', '0', controller)
        graph.set_pin(if1, 'False', '0', controller)
        graph.set_pin(get_transform, 'Space', 'GlobalSpace', controller)
        graph.set_pin(get_transform, 'bInitial', 'False', controller)
        graph.set_pin(get_transform1, 'Space', 'GlobalSpace', controller)
        graph.set_pin(get_transform1, 'bInitial', 'False', controller)
        graph.set_pin(if2, 'True', '(Rotation=(X=0.000000,Y=0.000000,Z=0.000000,W=1.000000),Translation=(X=0.000000,Y=0.000000,Z=0.000000),Scale3D=(X=1.000000,Y=1.000000,Z=1.000000))', controller)
        graph.set_pin(if4, 'False', 'Circle_Thin', controller)
        graph.set_pin(not_equals, 'B', 'Default', controller)
        graph.set_pin(set_item_metadata, 'Name', 'main', controller)
        graph.set_pin(set_item_metadata, 'NameSpace', 'Self', controller)
        graph.set_pin(vetala_lib_mirror_transform, 'Axis', '(X=1.000000,Y=0.000000,Z=0.000000)', controller)
        graph.set_pin(if5, 'False', '(Rotation=(X=0.000000,Y=0.000000,Z=0.000000,W=1.000000),Translation=(X=0.000000,Y=0.000000,Z=0.000000),Scale3D=(X=1.000000,Y=1.000000,Z=1.000000))', controller)
